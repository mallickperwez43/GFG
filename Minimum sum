class Solution {
  public:
    
    string addTwoStrings(string& s1, string& s2) {
        string result = "";
        int i = s1.length() - 1;
        int j = s2.length() - 1;
        int carry = 0;
        
        while(i >= 0 || j >= 0 || carry) {
            int sum = carry;
            if(i >= 0) 
                sum += (s1[i--] - '0');
            if(j >= 0) 
                sum += (s2[j--] - '0');
            
            int digit = sum % 10;
            result.push_back(digit + '0');
            carry = sum / 10;
        }
        
        reverse(result.begin(), result.end());
        
        // remove leading zeros
        int pos = 0; // position of first non zero digit
        while(pos < result.length() - 1 && result[pos] == '0') 
            pos++;
        
        return result.substr(pos);
    }
    
    string minSum(vector<int> &arr) {
        // code here
        int n = arr.size();
        sort(arr.begin(), arr.end());
        
        string num1 = ""; // even
        string num2 = ""; // odd
        
        
        int i = 0; // even
        int j = 1; // odd 
        
        while(i < n || j < n) {
            if(i < n) {
                num1.push_back(arr[i] + '0');
                i += 2; // next even index
            }
            if(j < n) {
                num2.push_back(arr[j] + '0');
                j += 2; // next odd index
            }
        }
        
        return addTwoStrings(num1, num2);
    }
};
