class Solution {
  public:
    typedef pair<int, pair<int, int>> P;
    
    vector<vector<int>> directions = {{-1, 0}, {0, 1}, {1, 0}, {0, -1}};
    
    vector<vector<int>> nearest(vector<vector<int>>& grid) {
        // code here
        int m = grid.size();    
        int n = grid[0].size();
        
        vector<vector<bool>> visited(m, vector<bool>(n, false));
        vector<vector<int>> result(m, vector<int>(n, 0));
        queue<P> que;
        
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j]) {
                    que.push({0, {i, j}});
                    visited[i][j] = true;
                    // result[i][j] = 0;
                }
            }
        }
        
        auto isSafe = [&](int i, int j) {
            return (i >= 0 && i < m && j >= 0 && j < n && grid[i][j] == 0 && !visited[i][j]);
        };
        
        while(!que.empty()) {
            P front = que.front();
            que.pop();
            
            int dist = front.first;
            int i    = front.second.first;
            int j    = front.second.second;
            
            for(auto& dir : directions) {
                int i_ = i + dir[0];
                int j_ = j + dir[1];
                
                if(isSafe(i_, j_)) {
                    visited[i_][j_] = true;
                    que.push({dist + 1, {i_, j_}});
                    result[i_][j_] = dist + 1;
                }
            }
        }
        
        return result;
    }
};
