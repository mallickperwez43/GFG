class Solution {
  public:
    int solve(vector<int>& prices, int k, int idx, bool canBuy, vector<vector<vector<int>>>& dp) {
        // base case
        if(idx == prices.size() || k == 0) {
            return 0;
        }
        
        if(dp[idx][k][canBuy] != -1) {
            return dp[idx][k][canBuy];
        }
        
        // recursion
        int profit;
        
        if(canBuy == true) {
            int buy = -prices[idx] + solve(prices, k, idx + 1, false, dp);
            int ignore = solve(prices, k, idx + 1, true, dp);
            profit = max(buy, ignore);
        }
        else {
            int sell = prices[idx] + solve(prices, k - 1, idx + 1, true, dp);
            int ignore = solve(prices, k, idx + 1, false, dp);
            profit = max(sell, ignore);
        }
        
        return dp[idx][k][canBuy] = profit;
    }
    
    int maxProfit(vector<int> &prices) {
        // code here
        int n = prices.size();
        vector<vector<vector<int>>> dp(n + 1, vector<vector<int>>(3, vector<int>(2, -1)));
        return solve(prices, 2, 0, true, dp);
    }
};



class Solution
{
    public:
        //User function Template for C++
        
        int maxProfit(vector<int>&price){
            //Write your code here..
            int buy1 = INT_MIN, sell1 = 0;

            int buy2 = INT_MIN, sell2 = 0;

 

            for (int prices : price) {

                buy1 = max(buy1, -prices);

                sell1 = max(sell1, buy1 + prices);

                buy2 = max(buy2, sell1 - prices);

                sell2 = max(sell2, buy2 + prices);

            }

            return sell2;
        }
};
