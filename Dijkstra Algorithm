class Solution {
  public:
    typedef pair<int, int> P;
    
    vector<int> dijkstra(int V, vector<vector<int>> &edges, int src) {
        // Code here
        
        unordered_map<int, vector<P>> adj;
        for(vector<int>& edge : edges) {
            int u  = edge[0];
            int v  = edge[1];
            int wt = edge[2];
            adj[u].push_back(make_pair(v, wt));
            adj[v].push_back(make_pair(u, wt));
        }
        
        priority_queue<P, vector<P>, greater<P>> pq;
        vector<bool> visited(V, false);
        vector<int> dist(V, INT_MAX);
        pq.push(make_pair(0, src));
        dist[src] = 0;
        
        while(!pq.empty()) {
            P top = pq.top();
            pq.pop();
            
            int node_dist = top.first;
            int node = top.second;
            
            if(visited[node] == true) 
                continue;
            
            visited[node] = true;
            
            for(P& it : adj[node]) {
                int ngbr  = it.first;
                int ngbr_dist = it.second;
                
                if(!visited[ngbr] && node_dist + ngbr_dist < dist[ngbr]) {
                    dist[ngbr] = node_dist + ngbr_dist;
                    pq.push(make_pair(dist[ngbr], ngbr));
                }
            }
        }
        
        return dist;
    }
};
