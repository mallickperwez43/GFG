/* A binary tree node has data, pointer to left child
   and a pointer to right child
struct Node
{
    int data;
    Node* left;
    Node* right;
}; */

class Solution {
  private:
    void preOrder(Node* root, vector<int>& result) {
        if(root == NULL) {
            result.push_back(-1);
            return;
        }
        
        result.push_back(root -> data);
        preOrder(root -> left, result);
        preOrder(root -> right, result);
        
        return;
    }
    
    Node* helper(vector<int>& res, int& idx) {
        if(res[idx] == -1 || idx >= res.size()) {
            idx++;
            return NULL;
        }
        
        Node* cur = new Node(res[idx]);
        idx++;
        cur -> left = helper(res ,idx);
        cur -> right = helper(res ,idx);
        
        return cur;
    }
    
  public:
    // Function to serialize a tree and return a list containing nodes of tree.
    vector<int> serialize(Node *root) {
        // Your code here
        vector<int> result;
        preOrder(root, result);
        return result;
    }

    // Function to deserialize a list and construct the tree.
    Node *deSerialize(vector<int> &arr) {
        // Your code here
        int index = 0;
        return helper(arr, index);
    }
};
