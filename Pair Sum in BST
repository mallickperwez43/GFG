/*Complete the function below
Node is as follows
struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};
*/


class BSTIterator{
    private:
    stack<Node*> st;
    bool reverse = true;
    // reverse -> true -> before
    // reverse -> false -> next;
    
    void pushValues(Node* root){
        while(root != NULL){
            st.push(root);
            if(reverse){ // before
                root = root -> right;
            }
            else{ // next
                root = root -> left;
            }
        }
    }
    
    public:
    
    BSTIterator(Node* root, bool isReverse){
        reverse = isReverse;
        pushValues(root);
    }
    
    bool hasNext(){
        return !st.empty();
    }
    
    int next(){
        Node* top = st.top();
        st.pop();
        
        if(reverse){
            pushValues(top -> left);
        }
        else{
            pushValues(top -> right);
        }
        
        return top -> data;
    }
};


class Solution{
  public:
    // root : the root Node of the given BST
    // target : the target sum
    int isPairPresent(struct Node *root, int target)
    {
        //add code here.
        if(root == NULL) return 0;
        
        BSTIterator l(root, false);
        BSTIterator r(root, true);
        
        int i = l.next(); // next
        int j = r.next(); // before
        
        while(i < j){
            if(i + j == target){
                return 1;
            }
            else if(i + j < target){
                i = l.next();
            }
            else{
                j = r.next();
            }
        }
        
        return 0;
    }
};

// TC : O(N)
// SC : O(H)
