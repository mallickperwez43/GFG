class Solution {
  public:
    int getLongestPrefix(string &s) {
        // code here
        int n = s.length();
        
        if(n <= 1)
            return -1;
        
        // Build LPS (KMP)
        vector<int> LPS(n, 0);
        int len = 0;
        int i = 1;
        
        while(i < n) {
            if(s[i] == s[len]) {
                len++;
                LPS[i] = len;
                i++;
            }
            else {
                if(len == 0) {
                    LPS[i] = 0;
                    i++;
                }
                else {
                    len = LPS[len - 1];
                }
            }
        }
        
        // Traverse the BORDERS And get the smallest non zero borders
        int j = LPS[n - 1];
        if(j == 0) return -1; // there is no longest prefix suffix
        
        int minBorder = INT_MAX;
        while(j > 0) {
            minBorder = min(minBorder, j); // min length of LPS
            j = LPS[j - 1]; // go to prev longest prefix suffix
        }
        
        if(minBorder == INT_MAX) return -1; 
        
        // Calculate the result
        
        int result = n - minBorder;
        return result > 0 ? result : -1;
    }
};
