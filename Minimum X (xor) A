class Solution {
  public:
    
    bool isSet(int& num, int bit) {
        return (num & (1 << bit));
    }
    
    void setBit(int& num, int bit) {
        num = (num | (1 << bit));
    }
    
    int minVal(int a, int b) {
        // code here
        int num = 0;
        
        int reqSetBitCount = __builtin_popcount(b); // the no of bits required as of in b
        
        // set the bit from MSB so as to minimize the xor of num & a
        for(int bit = 31; bit >= 0 && reqSetBitCount > 0; bit--) {
            if(isSet(a, bit)) {
                setBit(num, bit);
                reqSetBitCount--;
            }
        }
        
        // if there is still a bit difference left set the bits from the LSB
        for(int bit = 0; bit < 32 && reqSetBitCount > 0; bit++) {
            if(!isSet(a, bit)) {
                setBit(num, bit);
                reqSetBitCount--;
            }
        }
        
        return num;
    }
};
