// Sorting

class Solution {
  public:
    vector<int> kLargest(vector<int>& arr, int k) {
        // Your code here
        vector<int> result;
        sort(arr.begin(), arr.end());
        
        int n = arr.size();
        
        for(int i = n - 1; i >= (n - k); i--) {
            result.push_back(arr[i]);
        }
        
        return result;
    }
};

// TC : O(n * logn + k)
// SC : O(1)



// Heap(min heap)

class Solution {
  public:
    vector<int> kLargest(vector<int>& arr, int k) {
        // Your code here
        vector<int> result(k);
        priority_queue<int, vector<int>, greater<int>> pq; // min heap of size k to store k largest num 
        
        for(int& el : arr) {
            pq.push(el);
            
            if(pq.size() > k) 
                pq.pop();
        }
        
        while(!pq.empty() && k--) {
            result[k] = pq.top();
            pq.pop();
        }
        
        return result;
    }
};

// TC : O(n * logk + k*logk)
// SC : O(k)
