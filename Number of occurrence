class Solution{
public:	
    int firstOcc(int arr[], int n, int x){
        int start = 0;
        int end   = n - 1;
        
        int ans = -1;
        while(start <= end){
            int mid = start + (end - start) / 2;
            
            if(arr[mid] == x){
                ans = mid;
                end = mid - 1;
            }
            else if(arr[mid] > x){
                end = mid - 1;
            }
            else{
                start = mid + 1;
            }
        }
        
        return ans;
    } 
    
    int lastOcc(int arr[], int n, int x){
        int start = 0;
        int end   = n - 1;
        
        int ans = -1;
        while(start <= end){
            int mid = start + (end - start) / 2;
            
            if(arr[mid] == x){
                ans = mid;
                start = mid + 1;
            }
            else if(arr[mid] > x){
                end = mid - 1;
            }
            else{
                start = mid + 1;
            }
        }
        
        return ans;    
    }
    
	/* if x is present in arr[] then returns the count
		of occurrences of x, otherwise returns 0. */
	int count(int arr[], int n, int x) {
	    // code here
	    int firstOccOfX = firstOcc(arr, n, x);
	    
	    if(firstOccOfX == -1) return 0;
	    
	    int lastOccOfX = lastOcc(arr, n, x);
	    
	    return lastOccOfX - firstOccOfX + 1;
	}
};
