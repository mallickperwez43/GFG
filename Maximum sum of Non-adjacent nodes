// User function Template for C++

// Node Structure
/*
struct Node
{
    int data;
    Node* left;
    Node* right;
};
*/

class Solution {
  public:
    
    int solve(Node* root, unordered_map<Node*, int>& dp) {
        // base case
        if(root == NULL) {
            return 0;
        }
        if(dp.find(root) != dp.end()) {
            return dp[root];
        }
        
        int take = 0;
        int not_take = 0;
        
        // take -> skip the next level nodes
        take = root -> data;
        if(root -> left != NULL) { // take the children of root -> left
            if(root -> left -> left != NULL) {
                take += solve(root -> left -> left, dp);
            }
            if(root -> left -> right != NULL) {
                take += solve(root -> left -> right, dp);
            }
        }
        if(root -> right != NULL) { // take the children of root -> right
            if(root -> right -> left != NULL) {
                take += solve(root -> right -> left, dp);
            }
            if(root -> right -> right != NULL) {
                take += solve(root -> right -> right, dp);
            }
        }
        
        // not_take -> take the next level nodes
        if(root -> left != NULL) {
            not_take += solve(root -> left, dp);
        }
        if(root -> right != NULL) {
            not_take += solve(root -> right, dp);
        }
        
        return dp[root] = max(take, not_take);
    }
    
    // Function to return the maximum sum of non-adjacent nodes.
    int getMaxSum(Node *root) {
        // code here
        if(root == NULL) {
            return 0;
        }
        
        unordered_map<Node*, int> dp;
        return solve(root, dp);
    }
};


// cleaner way

class Solution {
  public:
    
    int solve(Node* root, unordered_map<Node*, int>& dp) {
        // base case
        if(root == NULL) {
            return 0;
        }
        
        if(dp.count(root)) {
            return dp[root];
        }
        
        // not_take / skip
        int not_take = solve(root -> left, dp) + solve(root -> right, dp);
        
        //take
        int take = root -> data;
        if(root -> left) {
            take += solve(root -> left -> left, dp) + solve(root -> left -> right, dp);
        }
        if(root -> right) {
            take += solve(root -> right -> left, dp) + solve(root -> right -> right, dp);
        }
        
        return dp[root] = max(take, not_take);
    }
    
    int getMaxSum(Node *root) {
        // code here
        unordered_map<Node*, int> dp;
        return solve(root, dp);
    }
};
