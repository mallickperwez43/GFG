class Solution {
  public:
    bool solve(vector<int>& arr, int idx, int sum, vector<vector<int>>& dp) {
        // base case
        if(sum == 0) { // found a subset sum equal to sum
            return true;
        }
        
        if(idx == arr.size() && sum != 0) { // reached end but not found sum
            return false;
        }
        
        if(dp[idx][sum] != -1) {
            return dp[idx][sum];
        }
        
        // recursion
        bool pick    = false;
        bool no_pick = false;
        
        if(arr[idx] <= sum) {
            pick = solve(arr, idx + 1, sum - arr[idx], dp);
        }
        no_pick = solve(arr, idx + 1, sum, dp);
        
        return dp[idx][sum] = pick || no_pick;
    }
    
    bool equalPartition(vector<int>& arr) {
        // code here
        int n = arr.size();
        
        int total = accumulate(arr.begin(), arr.end(), 0);
        
        if(total & 1) { // odd -> cant divide
            return false;
        }
        
        vector<vector<int>> dp(n + 1, vector<int>(total + 1, -1));
        return solve(arr, 0, total / 2, dp);
    }
};
