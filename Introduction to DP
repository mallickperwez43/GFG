class Solution {
  public:
    const int MOD = 1e9 + 7;
    
    long long int solve(int n, vector<long long int>& dp) {
        // base case
        if(n <= 1) {
            return n;
        }
        
        if(dp[n] != -1) {
            return dp[n];
        }
        
        // recursion
        return dp[n] = (solve(n - 1, dp) + solve(n - 2, dp)) % MOD;
    }
    
    long long int topDown(int n) {
        // code here
        
        // recursion + memoization
        
        vector<long long int> dp(n + 1, -1);
        return solve(n, dp);
    }
    
    long long int bottomUp(int n) {
        // code here
        
        // tabulation
            
        // base case
        if(n <= 1) {
            return n;
        }
        
        long long int prev1 = 1;
        long long int prev2 = 0;
        long long int cur;
        
        for(int i = 2; i <= n; i++) {
            cur = (prev1 + prev2) % MOD;
            prev2 = prev1;
            prev1 = cur;
        }
        
        return prev1;
    }
};
