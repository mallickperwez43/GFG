/*
class Node {
  public:
    int data;
    Node* left;
    Node* right;

    Node(int val) {
        data = val;
        left = NULL;
        right = NULL;
    }
};
*/

class Solution {
  public:
    typedef pair<int,int> P;
    
    void solve(Node* root, int target, int k, priority_queue<P>& pq) {
        if(root == NULL) {
            return;
        }
        
        solve(root -> left, target, k, pq);
        
        pq.push(make_pair(abs(root -> data - target), root -> data));
        
        if(pq.size() > k) {
            pq.pop();
        }
        
        solve(root -> right, target, k, pq);
    }
    
    vector<int> getKClosest(Node* root, int target, int k) {
        // code here
        priority_queue<P> pq;
        
        solve(root, target, k, pq);
        
        vector<int> result;
        while(!pq.empty()) {
            result.push_back(pq.top().second);
            pq.pop();
        }
        
        return result;
    }
};
