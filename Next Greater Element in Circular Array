class Solution {
  public:
    vector<long long> nextLargerElement(vector<long long> &arr, int n){
        // Your code here
        stack<long long> st;
        vector<long long> ans(n);
        
        for(int i = 2 * n - 1; i >= 0; i--){
            int idx = i % n; // circular array
            long long curNum = arr[idx];
            
            while(!st.empty() && st.top() <= curNum){
                st.pop(); // make monotously deletion
            }
            ans[idx] = st.empty() ? -1 : st.top();
            st.push(curNum);
        }
        
        return ans;
    }
};


class Solution {
  public:
    vector<int> nextLargerElement(vector<int> &arr) {
        // code here
        int n = arr.size();
        
        stack<int> st; // to store elements
        vector<int> result(n, -1);
        
        // since array is circular so run a 2n loop
        
        for(int i = 2 * n - 1; i >= 0; i--) {
            int idx = i % n;
            int cur = arr[idx];
            
            // maintain the monotonously decreasing order of stack
            while(!st.empty() && st.top() <= cur) {
                st.pop();
            }
            
            result[idx] = st.empty() ? -1 : st.top();
            
            st.push(cur);
        }
        
        return result;
    }
};
