class Solution {

  public:
    long long maxArea(vector<long long> &arr) {
        // code here
        int left = 0;
        int right = arr.size() - 1;
        
        long long mArea = 0;
        
        while(left < right){
            int length  = min(arr[left], arr[right]);
            int breadth = right - left;
            
            long long curArea = 1LL * length * breadth;
            
            mArea = max(mArea, curArea);
            
            if(arr[left] < arr[right]){
                left++;
            }
            else{
                right--;
            }
        }
        
        return mArea;
    }
};

class Solution {

  public:
    int maxWater(vector<int> &arr) {
        // code here
        int n = arr.size();
        int i = 0;
        int j = n - 1;
        int maxArea = 0;
        int curArea = 0;
        
        while(i < j){
            int length = min(arr[i], arr[j]);
            int breadth = j - i;
            
            curArea = length * breadth;
            
            maxArea = max(maxArea, curArea);
            
            if(arr[i] < arr[j]){
                i++;
            }
            else{
                j--;
            }
        }
        
        return maxArea;
    }
};
