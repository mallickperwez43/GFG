class Solution {
public:
	bool isPossible(int N,int P, vector<pair<int, int> >& prerequisites) {
	    // Code here
	    // topological sort
	    unordered_map<int, vector<int>> adj;
	    vector<int> inDeg(N, 0);
	    
	    // adj list and indeg
	    for(int i = 0; i < P; i++){
	        int u = prerequisites[i].first;
	        int v = prerequisites[i].second;
	        adj[v].push_back(u);
	        inDeg[u]++;
	    }
	    
	    // push all nodes with inDeg zero in queue
	    queue<int> q;
	    for(int i = 0; i < N; i++){
	        if(inDeg[i] == 0){
	            q.push(i);
	        }
	    }
	    
	    // topological sort and count nodes : if all nodes visited then true
	    int nodeCnt = 0;
	    while(!q.empty()){
	        int frontNode = q.front();
	        q.pop();
	        nodeCnt++;
	        
	        for(auto& nbr : adj[frontNode]){
	            inDeg[nbr]--;
	            if(inDeg[nbr] == 0){
	                q.push(nbr);
	            }
	        }
	    }
	    
	    return nodeCnt == N ? true : false;
	}
};
