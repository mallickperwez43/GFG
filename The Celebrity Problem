// Brute force (O(n^2))

class Solution {
  public:
    int celebrity(vector<vector<int>>& mat) {
        // code here
        
        int n = mat.size();
        for (int i = 0; i < n; i++) {
            bool knowsSomeone = false, knownByAll = true;
            for (int j = 0; j < n; j++) {
                if (i != j) {
                    if (mat[i][j] == 1) knowsSomeone = true;
                    if (mat[j][i] == 0) knownByAll = false;
                }
            }
            if (!knowsSomeone && knownByAll) return i;
        }
        return -1;
    }
};

// TC : O(n^2)
// SC : O(1)


// Graph (in and out degree)

class Solution {
  public:
    int celebrity(vector<vector<int>>& mat) {
        // code here
        int n = mat.size();
        
        vector<int> outDegree(n, 0);
        vector<int> inDegree(n, 0);
        
        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                if(mat[i][j] == 0 || i == j)
                    continue;
                    
                outDegree[i]++;
                inDegree[j]++;
                
            }
        }
        
        for(int i = 0; i < n; i++) {
            if(outDegree[i] == 0 && inDegree[i] == n - 1) {
                return i;
            }
        }
        
        return -1;
    }
};

// TC : O(n^2)
// SC : O(n)


// Stack based 

class Solution {
  public:
    int celebrity(vector<vector<int>>& mat) {
        // code here
        
        int n = mat.size();
        stack<int> s;
        for (int i = 0; i < n; i++) s.push(i);

        while (s.size() > 1) {
            int a = s.top(); s.pop();
            int b = s.top(); s.pop();
            if (mat[a][b]) s.push(b); // a knows b → a can't be celebrity
            else s.push(a);           // a doesn't know b → b can't be celebrity
        }

        int candidate = s.top();
        for (int i = 0; i < n; i++) {
            if (i != candidate && (mat[candidate][i] == 1 || mat[i][candidate] == 0))
                return -1;
        }
        return candidate;

    }
};

// TC : O(n)
// SC : O(n)


// Two pointers 

class Solution {
  public:
    int celebrity(vector<vector<int>>& mat) {
        // code here
        
        int n = mat.size();
        int a = 0, b = n - 1;
        while (a < b) {
            if (mat[a][b]) a++;
            else b--;
        }

        for (int i = 0; i < n; i++) {
            if (i != a && (mat[a][i] == 1 || mat[i][a] == 0))
               return -1;
        }
        return a;
    }
};


// TC : O(n)
// SC : O(1)
