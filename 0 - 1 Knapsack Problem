// RECURSION + MEMOIZATION

class Solution {
  public:
    int solve(int idx, int W, int n, vector<int>& val, vector<int>& wt, vector<vector<int>>& dp) {
        // base case
        if(idx == n) {
            return 0;
        }
        
        if(dp[idx][W] != -1) {
            return dp[idx][W];
        }
        
        // recursion
        int noPick = solve(idx + 1, W, n, val, wt, dp);
        int pick = 0;
        if(W >= wt[idx]) {
            pick = val[idx] + solve(idx + 1, W - wt[idx], n, val, wt, dp);
        }
        
        return dp[idx][W] = max(noPick, pick);
    }
    int knapsack(int W, vector<int> &val, vector<int> &wt) {
        // code here
        int n = val.size();
        vector<vector<int>> dp(n + 1, vector<int>(W + 1, -1));
        return solve(0, W, n, val, wt, dp);
    }
};


// BOTTOM UP

class Solution {
  public:
    int knapsack(int W, vector<int> &val, vector<int> &wt) {
        // code here
        int n = wt.size();
        
        vector<vector<int>> dp(n + 1, vector<int>(W + 1, 0));
        // dp[i][j] = max val till the ith index with jth weight
        
        for(int idx = 1; idx <= n; idx++) {
            for(int w = 0; w <= W; w++) {
                int noPick = dp[idx - 1][w]; 
                int pick = 0;
                if(w >= wt[idx - 1]) {
                    pick = val[idx - 1] + dp[idx - 1][w - wt[idx - 1]];
                }
                
                dp[idx][w] = max(noPick, pick);
            }
        }
        
        return dp[n][W];
    }
};
