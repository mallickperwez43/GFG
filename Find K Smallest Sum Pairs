class Solution {
  public:
    typedef pair<int, pair<int, int>> P;
    
    vector<vector<int>> kSmallestPair(vector<int> &arr1, vector<int> &arr2, int k) {
        // code here
        int n = arr1.size();
        int m = arr2.size();
        
        vector<vector<int>> result;
        
        if(arr1.empty() || arr2.empty() || k == 0)
            return result;
        
        priority_queue<P, vector<P>, greater<P>> pq;
        
        int minLen = min(n, k);
        
        // push first minLen elements from arr1 and first element from arr2 in heap
        for(int i = 0; i < minLen; i++) {
            pq.push({arr1[i] + arr2[0], {i, 0}});
        }
        
        // try adding from arr2 now
        
        while(!pq.empty() && k--) {
            P top = pq.top();
            pq.pop();
            
            int i = top.second.first;
            int j = top.second.second;
            
            result.push_back({arr1[i], arr2[j]});
            
            if(j + 1 < m) {
                pq.push({arr1[i] + arr2[j + 1], {i, j + 1}});
            }
        }
        
        return result;
    }
};
