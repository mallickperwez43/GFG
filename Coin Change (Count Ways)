// RECURSION + MEMOIZATION

class Solution {
  public:
    int solve(int idx, vector<int>& coins, int sum, vector<vector<int>>& dp) {
        // base case
        if(sum == 0) { // 1 way choose no coin
            return 1;
        }
        
        if(idx == coins.size()) {
            return 0;
        }
        
        if(dp[idx][sum] != -1) {
            return dp[idx][sum];
        }
        
        // recusion
        int pick   = 0;
        if(sum >= coins[idx]) {
            pick = solve(idx, coins, sum - coins[idx], dp);
        }
        int noPick = solve(idx + 1, coins, sum, dp);
        
        return dp[idx][sum] = pick + noPick;
    }
    
    int count(vector<int>& coins, int sum) {
        // code here.
        int n = coins.size();
        vector<vector<int>> dp(n + 1, vector<int>(sum + 1, -1));
        return solve(0, coins, sum, dp);
    }
};


// BOTTOM UP

class Solution {
  public:
    int count(vector<int>& coins, int sum) {
        // code here.
        int n = coins.size();
        
        vector<vector<int>> dp(n + 1, vector<int>(sum + 1, 0));
        // dp[i][j] = number of ways to make sum j from chosing coins from 0 to ith index
        
        // base case for sum 0 only 1 way
        for(int i = 0; i <= n; i++) {
            dp[i][0] = 1;
        }
        
        for(int idx = 1; idx <= n; idx++) {
            for(int curSum = 0; curSum <= sum; curSum++) {
                int prevWays = dp[idx - 1][curSum];
                
                if(coins[idx - 1] <= curSum) { // take
                    int curTake = dp[idx][curSum - coins[idx - 1]];
                    dp[idx][curSum] = curTake + prevWays;
                }
                else {
                    dp[idx][curSum] = prevWays;
                }
            }
        }
        
        return dp[n][sum];
    }
};
