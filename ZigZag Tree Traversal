/*
class Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};
*/
class Solution {
  public:
    vector<int> zigZagTraversal(Node* root) {
        // code here
        if(root == NULL) {
            return {};
        }
        
        queue<Node*> que;
        bool isEvenLevel = true;
        que.push(root);
        
        vector<int> result;
        
        while(!que.empty()) {
            int n = que.size();
            vector<int> temp;
            while(n--) {
                Node* frontNode = que.front();
                que.pop();
                
                temp.push_back(frontNode -> data);
                
                if(frontNode -> left != NULL) {
                    que.push(frontNode -> left);
                }
                
                if(frontNode -> right != NULL) {
                    que.push(frontNode -> right);
                }
            }
            
            if(!isEvenLevel) {
                reverse(temp.begin(), temp.end());
            }
            
            for(int& nodeVal : temp) {
                result.push_back(nodeVal);
            }
            
            isEvenLevel = !isEvenLevel;
        }
        
        return result;
    }
};


// way 2

class Solution{
    public:
    //Function to store the zig zag order traversal of tree in a list.
    vector <int> zigZagTraversal(Node* root)
    {
    	// Code here
    	vector<int> ans;
    	if(root == NULL)
    	    return ans;
    	    
    	bool isEven = true;
    	
    	queue<Node*> q;
    	q.push(root);
    	
    	while(!q.empty()){
    	    int size = q.size();
    	    vector<int> temp;
    	    for(int i = 0; i < size; i++){
    	        Node* curNode = q.front();
    	        q.pop();
    	        temp.push_back(curNode -> data);
    	        if(curNode -> left){
    	            q.push(curNode -> left);
    	        }
    	        if(curNode -> right){
    	            q.push(curNode -> right);
    	        }
    	    }
    	    if(!isEven){
    	        //reverse(temp.begin(), temp.end());
    	        stack<int> s;
    	        for(int i = 0; i < temp.size(); i++){
    	            s.push(temp[i]);
    	        }
    	        
    	        for(int i = 0; i< temp.size(); i++){
    	            temp[i] = s.top();
    	            s.pop();
    	        }
    	    }
    	    for(int i = 0; i < temp.size(); i++){
    	        ans.push_back(temp[i]);
    	    }
    	    isEven = !isEven;
    	}
    	return ans;
    }
};


// way 3

class Solution{
    public:
    //Function to store the zig zag order traversal of tree in a list.
    vector <int> zigZagTraversal(Node* root)
    {
    	// Code here
    	vector<int>result;
    	if(root==NULL){
    	    return result;
    	}
    	
    	queue<Node*>q;
    	q.push(root);
    	
    	bool leftToRight = true;
    	
    	while(!q.empty()){
    	    int size = q.size();
    	    vector<int>ans(size);
    	    for(int i=0;i<size;i++){
    	        Node* frontNode = q.front();
    	        q.pop();
    	        
    	        int index = leftToRight ? i : size-i-1;
    	        
    	        ans[index]=frontNode->data;
    	        
    	        if(frontNode->left){
    	            q.push(frontNode->left);
    	        }
    	        
    	        if(frontNode->right){
    	            q.push(frontNode->right);
    	        }
    	        
    	    }
    	    leftToRight = !leftToRight;
    	    for(auto i:ans){
    	        result.push_back(i);
    	    }
    	}
    	return result;
    }
};
