class Solution {
  public:
    bool solve(vector<int>& arr, int sum, int idx, vector<vector<int>>& dp) {
        // base case
        if(sum == 0) return true;
        
        if(idx == arr.size() && sum != 0) return false;
        
        if(dp[idx][sum] != -1) {
            return dp[idx][sum];
        }
        
        // recursion
        bool pick = false;
        bool noPick = false;
        
        if(arr[idx] <= sum) {
            pick = solve(arr, sum - arr[idx], idx + 1, dp);
        }
        noPick = solve(arr, sum, idx + 1, dp);
        
        return dp[idx][sum] = (pick || noPick);
    }
    
    bool isSubsetSum(vector<int>& arr, int sum) {
        // code here
        int n = arr.size();
        vector<vector<int>> dp(n + 1, vector<int>(sum + 1, -1));
        return solve(arr, sum, 0, dp);
    }
};
