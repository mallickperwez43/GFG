// RECURSION + MEMOIZATION

class Solution {

  public:
    
    int solve(vector<int>& arr, int n, int idx, int curSum, int totalSum, vector<vector<int>>& dp) {
        // base case
        if(idx >= n) {
            // curSum -> S1
            // S2 = totalSum - curSum;
            // return abs(curSum - (totalSum - curSum));
            return abs(totalSum - 2 * curSum);
        }
        if(dp[idx][curSum] != -1) {
            return dp[idx][curSum];
        }
        
        // recursion
        int take = INT_MAX;
        int not_take = INT_MAX;
        
        
        take = solve(arr, n, idx + 1, curSum + arr[idx], totalSum, dp);
        not_take = solve(arr, n, idx + 1, curSum, totalSum, dp);
        
        return dp[idx][curSum] = min(take, not_take);
    }
    
    int minDifference(vector<int>& arr) {
        // Your code goes here
        int n = arr.size();
        
        int totalSum = accumulate(arr.begin(), arr.end(), 0);
        vector<vector<int>> dp(n + 1, vector<int>(totalSum + 1, -1));
        
        return solve(arr, n, 0, 0, totalSum, dp);
    }
};



// BOTTOM UP

class Solution {

  public:
    
    int minDifference(vector<int>& arr) {
        // Your code goes here
        int n = arr.size();
        
        int totalSum = accumulate(arr.begin(), arr.end(), 0);
        vector<vector<bool>> dp(n + 1, vector<bool>(totalSum + 1, false));
        // dp[i][j] = can i make a subset s1 from elements till index i with sum = j
        
        for(int i = 0; i <= n; i++) {
            dp[i][0] = true; // no taking any element and making sum = 0
        }
        
        for(int idx = 1; idx <= n; idx++) {
            for(int curSum = 0; curSum <= totalSum; curSum++) {
                // not picking the curEl and checking if I can make sum from prev idx el(1 based)
                int not_take = dp[idx - 1][curSum]; 
                
                int take = false;
                
                if(arr[idx - 1] <= curSum) { // can i form sum including this el
                    take = dp[idx - 1][curSum - arr[idx - 1]]; 
                    // dp[i][curSum - el]
                    // can i form (sum - el)  from i elements then i can take this el
                }
                
                dp[idx][curSum] = take || not_take;
            }
        }
        
        int res = INT_MAX;
        
        for(int s1 = totalSum / 2; s1 >= 0; s1--) {
            if(dp[n][s1] == true) {
                res = abs(totalSum - 2 * s1);
                break;
            }
        }
        
        return res;
    }
};
