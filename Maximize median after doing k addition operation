class Solution {
  public:
    
    long long solve(long long median, int n, vector<int>& arr) {
        long long opReq = 0;
        
        if(n & 1) { // raise median and right side
            for(int i = n / 2; i < n; i++) {
                if(arr[i] < median) {
                    opReq += (median - arr[i]);
                }
            }
        }
        else { // raise both median and the right side
            opReq += (2 * median - arr[n / 2 - 1] - arr[n / 2]); // equalising difference
          
            // right sie
            for(int i = n / 2 + 1; i < n; i++) {
                if(arr[i] < median) {
                    opReq += (median - arr[i]);
                }
            }
            
        }
        
        return opReq;
    }
    
    int maximizeMedian(vector<int>& arr, int k) {
        // code here
        int n = arr.size();
        
        sort(arr.begin(), arr.end());
        
        int median = (n & 1) ? arr[n / 2] : ((arr[n / 2 - 1] + arr[n / 2]) / 2);
        
        long long low = median;
        long long high = median + k;
        long long result = median; // current median without increment
        
        while(low <= high) {
            long long mid = low + (high - low) / 2;
            
            long long operationsReq = solve(mid, n, arr);
            
            if(operationsReq <= k) {
                result = mid;
                low = mid + 1;
            }
            else 
                high = mid - 1;
        }
        
        return (int)result;
    }
};
