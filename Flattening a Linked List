/* Node structure  used in the program

struct Node{
    int data;
    struct Node * next;
    struct Node * bottom;

    Node(int x){
        data = x;
        next = NULL;
        bottom = NULL;
    }

};
*/

class Solution {
  public:
    Node* mergeLL(Node* down, Node* right){
        if(down == NULL){
            return right;
        }
        if(right == NULL){
            return down;
        }
        
        Node* dummy = new Node(-1);
        Node* temp = dummy;
        
        while(down != NULL && right != NULL){
            if(down -> data < right -> data){
                temp -> bottom = down;
                temp = down;
                down = down -> bottom;
            }
            else{
                temp -> bottom = right;
                temp = right;
                right = right -> bottom;
            }
        }
        
        while(down != NULL){
            temp -> bottom = down;
            temp = down;
            down = down -> bottom;
        }
        
        while(right != NULL){
            temp -> bottom = right;
            temp = right;
            right = right -> bottom;
        }
        
        Node* head = dummy -> bottom;
        dummy -> next = NULL;
        delete dummy;
        
        return head;
        
    }
    // Function which returns the  root of the flattened linked list.
    Node *flatten(Node *root) {
        // Your code here
        
        // base case 
        if(root == NULL || root -> next == NULL){
            return root;
        }
        
        Node* downLL = root;
        Node* rightLL = flatten(root -> next);
        downLL -> next = NULL;
        
        Node* ans = mergeLL(downLL, rightLL);
        
        return ans;
    }
};
