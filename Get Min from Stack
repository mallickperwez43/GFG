class Solution {
  public:
    stack<pair<int, int>> st; // {curEl, minEl}
    int curMin;
    Solution() {
        // code here
        curMin = INT_MAX;
    }

    // Add an element to the top of Stack
    void push(int x) {
        // code here
        curMin = min(curMin, x);
        st.push(make_pair(x, curMin));
    }

    // Remove the top element from the Stack
    void pop() {
        // code here
        if(!st.empty()) {
            if(curMin != st.top().second) {
                st.pop();
            }
            else { // curMin is poped so update cur min
                st.pop();
                st.empty() ? curMin = INT_MAX : curMin = st.top().second;    
            }
        }
    }

    // Returns top element of the Stack
    int peek() {
        // code here
        return (st.empty()) ? -1 : st.top().first;
    }

    // Finds minimum element of Stack
    int getMin() {
        // code here
        return (st.empty()) ? -1 : st.top().second;
    }
};
