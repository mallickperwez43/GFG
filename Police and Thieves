//User function Template for C++

class Solution{
    public:
    int catchThieves(char arr[], int n, int k) 
    {
        // Code here 
        queue<int> theif;  // store theif indices
        queue<int> police; // store police indices
        
        for(int i = 0; i < n; i++){
            if(arr[i] == 'T'){
                theif.push(i);
            }
            else{
                police.push(i);
            }
        }
        
        int coughtCnt = 0;
        
        while(!theif.empty() && !police.empty()){
            if(abs(police.front() - theif.front()) <= k){ // in range can be caught
                coughtCnt++;
                police.pop();
                theif.pop();
            }
            else if(police.front() > theif.front()){ // theif is out of range 
                theif.pop();
            }
            else{ // theif.front() > police.pop() // police is not in range
                police.pop();
            }
        }
        
        return coughtCnt;
    }
};

// TC : O(n)
// SC : O(n)

// Approach 2 : no extra space

class Solution {
  public:
    int catchThieves(vector<char> &arr, int k) {
        // Code here
        int n = arr.size();
        
        int police = find(arr.begin(), arr.end(), 'P') - arr.begin();
        int thief  = find(arr.begin(), arr.end(), 'T') - arr.begin();
        
        int coughtCnt = 0;
        
        while(police < n && thief < n) {
            if(abs(police - thief) <= k) {
                coughtCnt++;
                police++;
                thief++;
            }
            else if(police < n && police < thief) 
                police++; // thief not in range
            else if(thief < n && thief < police) 
                thief++; // police not in range
            
            while(police < n && arr[police] != 'P') 
                police++; // get the next police idx
            
            while(thief < n && arr[thief] != 'T') 
                thief++; // get the next thief idx
        }
        
        return coughtCnt;
    }
};

// TC : O(n)
// SC : O(1)
