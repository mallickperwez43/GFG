class Solution {
  public:
    int longestSubarray(vector<int> &arr, int k) {
        // Code here
        unordered_map<int, int> mp; // prefixSum -> index
        mp[0] = -1;
        
        int n = arr.size();
        int prefixSum = 0;
        int maxLen = 0;
        
        for(int i = 0; i < n; i++) {
            
            prefixSum += (arr[i] > k) ? 1 : -1;
            
            if(prefixSum > 0) { // subarray from 0 .. i
                maxLen = i + 1;
            }
            
            if(mp.find(prefixSum - 1) != mp.end()) { // found a prev prefix sum lesser and range in which greater
                maxLen = max(maxLen, i - mp[prefixSum - 1]);
            }
            
            if(mp.find(prefixSum) == mp.end()) { // insert in map
                mp[prefixSum] = i;
            }
        }
        
        return maxLen;
    }
};


class Solution {
  public:
    int longestSubarray(vector<int> &arr, int k) {
        // Code here
        unordered_map<int, int> mp;
        // {prefixSum --> indices}
        mp[0] = -1;
        
        int n = arr.size();
        int prefixSum = 0;
        int maxLen    = 0;
        
        for(int i = 0; i < n; i++) {
            if(arr[i] > k) {
                prefixSum += 1;
            }
            else {
                prefixSum -= 1;
            }
            
            if(prefixSum > 0) { // have greater than k elements in majority
                maxLen = i + 1; // 0....i
            }
            
            // mp[-1] = 1
            // mp[-2] = 2
            // mp[-1] = 3 phir aaya
            // -1 hua index 3 pr yani -2 mein koi add hua hoga
            // len = i - mp[prefixSum - 1];
            // 3 - mp[-2] => 3 - 2 = 1 length
            if(mp.find(prefixSum - 1) != mp.end()) {
                maxLen = max(maxLen, i - mp[prefixSum - 1]);
            }
            
            // insert in map
            if(mp.find(prefixSum) == mp.end()) {
                mp[prefixSum] = i;
            }
        }
        
        return maxLen; 
    }
};
