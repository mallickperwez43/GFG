class Solution {
  public:
    int longestSubarray(vector<int> &arr, int k) {
        // Code here
        unordered_map<int, int> mp; // prefixSum -> index
        mp[0] = -1;
        
        int n = arr.size();
        int prefixSum = 0;
        int maxLen = 0;
        
        for(int i = 0; i < n; i++) {
            
            prefixSum += (arr[i] > k) ? 1 : -1;
            
            if(prefixSum > 0) { // subarray from 0 .. i
                maxLen = i + 1;
            }
            
            if(mp.find(prefixSum - 1) != mp.end()) { // found a prev prefix sum lesser and range in which greater
                maxLen = max(maxLen, i - mp[prefixSum - 1]);
            }
            
            if(mp.find(prefixSum) == mp.end()) { // insert in map
                mp[prefixSum] = i;
            }
        }
        
        return maxLen;
    }
};
