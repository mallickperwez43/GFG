class Solution {
  public:
    
    vector<int> nextSmaller(vector<int>& arr) {
        int n = arr.size();
        vector<int> nse(n, n); // Initialize with n(out of bound)
        stack<int> st; // store indices
        
        for(int i = n - 1; i >= 0; i--) {
            while(!st.empty() && arr[st.top()] >= arr[i]) {
                st.pop();
            }
            
            if(!st.empty()) nse[i] = st.top();
            
            st.push(i);
        }
        
        return nse;
    }
    
    vector<int> prevSmaller(vector<int>& arr) {
        int n = arr.size();
        vector<int> pse(n, -1); // Initialize with -1
        stack<int> st; // store indices
        
        for(int i = 0; i < n; i++) {
            while(!st.empty() && arr[st.top()] >= arr[i]) {
                st.pop();
            }
            
            if(!st.empty()) pse[i] = st.top();
            
            st.push(i);
        }
        
        return pse;
    }
      
    int getMaxArea(vector<int> &arr) {
        // Your code here
        int n = arr.size();
        vector<int> nextSmallerArr = nextSmaller(arr);
        vector<int> prevSmallerArr = prevSmaller(arr);
        int maxArea = 0;
        
        for(int i = 0; i < n; i++) {
            int length = arr[i]; // cur height
            int breadth = nextSmallerArr[i] - prevSmallerArr[i] - 1; // cur width
            int curArea = length * breadth;
            maxArea =  max(maxArea, curArea);
        }
        
        return maxArea;
    }
};
