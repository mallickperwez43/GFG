/* BST Node
struct Node
{
	int key;
	struct Node *left;
	struct Node *right;
	
	Node(int x){
	    key = x;
	    left = NULL;
	    right = NULL;
	}
};
*/

// This function finds predecessor and successor of key in BST.
// It sets pre and suc as predecessor and successor respectively
class Solution
{
    public:
    void findPreSuc(Node* root, Node*& pre, Node*& suc, int key)
    {
        // Your code goes here
        while(root){
            if(key < root -> key){ // possibility of a successor
                suc = root;
                root = root -> left;
            }
            else if(key > root -> key){ // possibility of a predecessor
                pre = root;
                root = root -> right;
            }
            else{ // key found
                // max in left -> predecessor
                if(root -> left){
                    Node* temp = root -> left;
                    while(temp -> right){
                        temp = temp -> right;
                    }
                    pre = temp;
                }
                // min in right -> successor
                if(root -> right){
                    Node* temp = root -> right;
                    while(temp -> left){
                        temp = temp -> left;
                    }
                    suc = temp;
                }
                
                return;
            }
        }
    }
};
