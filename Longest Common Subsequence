// RECURSION + MEMOIZATION

class Solution {
  public:
    int dp[1001][1001];
    
    int solve(int i, int j, string& s1, string& s2) {
        // base case
        if(i == s1.length() || j == s2.length()) {
            return 0;
        }
        
        if(dp[i][j] != -1) {
            return dp[i][j];
        }
        
        // recursion
        if(s1[i] == s2[j]) {
            return dp[i][j] = 1 + solve(i + 1, j + 1, s1, s2);
        }
        else {
            return dp[i][j] = max(solve(i, j + 1, s1, s2), solve(i + 1, j, s1, s2));
        }
    }
    
    int lcs(string &s1, string &s2) {
        // code here
        int i = 0;
        int j = 0;
        memset(dp, -1, sizeof(dp));
        return solve(i, j, s1, s2);
    }
};

// BOTTPM UP

class Solution {
  public:
    // Function to find the length of longest common subsequence in two strings.
    int lcs(int n, int m, string str1, string str2) {
        // your code here
        vector<vector<int>> dp(n + 1, vector<int>(m + 1, 0));
        // dp[i][j] = LCS of s1 till i index and s2 till j index

        for(int i = 1; i <= n; i++){
            for(int j = 1; j <= m; j++){
                if(str1[i - 1] == str2[j - 1]){
                    dp[i][j] = 1 + dp[i - 1][j - 1]; 
                }
                else{
                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]);
                }
            }
        }
        
        return dp[n][m];
    }
};
