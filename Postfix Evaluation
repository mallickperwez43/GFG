class Solution {
  public:
    bool isOperator(string& s) {
        return s == "+" || s == "-" || s == "*" || s == "/" || s == "^";
    }
    
    int evaluatePostfix(vector<string>& arr) {
        // code here
        stack<int> st;
        
        for (string& s : arr) {
            if (isOperator(s)) {
                int b = st.top(); st.pop();
                int a = st.top(); st.pop();
                
                if (s == "+") st.push(a + b);
                else if (s == "-") st.push(a - b);
                else if (s == "*") st.push(a * b);
                else if (s == "/") {
                    int res = a / b;
                    if ((a ^ b) < 0 && a % b != 0) res--; // adjust toward floor
                    st.push(res);
                }
                else if (s == "^") {
                    long long res = 1, base = a, exp = b;
                    while (exp > 0) {
                        if (exp & 1) res *= base;
                        base *= base;
                        exp >>= 1;
                    }
                    st.push((int)res);
                }
            } else {
                st.push(stoi(s));
            }
        }
        
        return st.top();

    }
}
