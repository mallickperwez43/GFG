// CLASSIC SORT

class Solution {
  public:
    int hIndex(vector<int>& citations) {
        // code here
        int result = 0;
        int n = citations.size();
        
        sort(citations.begin(), citations.end());
        
        for(int i = 0; i < n; i++) {
            if(citations[i] >= n - i) { // found a citation used for more paper
                result = n - i;
                break;
            }
        }
        
        return result;
    }
};

// TC : O(nlogn)
// SC : O(1)



// COUNTING SORT

class Solution {
  public:
    int hIndex(vector<int>& citations) {
        // code here
        int n = citations.size();
        
        vector<int> freq(n + 1, 0);
        
        for(int& citation : citations) {
            (citation >= n) ? freq[n]++ : freq[citation]++;
        }
        
        int count = 0;
        
        for(int i = n; i >= 0; i--) {
            count += freq[i];
            if(count >= i)
                return i;
        }
        
        return 0;
    }
};

// TC : O(n)
// SC : O(n)
