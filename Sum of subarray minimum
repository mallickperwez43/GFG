class Solution {
  public:
    int M = 1e9 + 7;
    
    vector<int> getNSL(vector<int>& arr, int n) {
        vector<int> result(n);
        stack<int> st;
        
        for(int i = 0; i < n; i++) {
            while(!st.empty() && arr[st.top()] >= arr[i]) // handle duplicate so eqaul sign
                st.pop();
                
            result[i] = st.empty() ? -1 : st.top();
            
            st.push(i);
        }
        
        return result;
    }
    
    vector<int> getNSR(vector<int>& arr, int n) {
        vector<int> result(n);
        stack<int> st;
        
        for(int i = n - 1; i >= 0; i--) {
            while(!st.empty() && arr[st.top()] > arr[i]) 
                st.pop();
                
            result[i] = st.empty() ? n : st.top();
            
            st.push(i);
        }
        
        return result;
    }
    
    int sumSubMins(vector<int> &arr) {
        // code here
        int n = arr.size();
        
        vector<int> NSL = getNSL(arr, n); // next smaller to left
        vector<int> NSR = getNSR(arr, n); // next smaller to right
        
        long long sum = 0;
        
        for(int i = 0; i < n; i++) {
            long long ls = i - NSL[i]; // left me kitne elements honge
            long long rs = NSR[i] - i; // right me kitne elements honge
            
            long long totalWays = ls * rs;
            // totalWays subarrays honge jinka minimum arr[i] hai
            
            long long totalSum = arr[i] * totalWays;
            
            sum = (sum + totalSum) % M;
        }
        
        return sum;
    }
};
