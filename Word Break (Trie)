class Solution{
    public:
    // A : given string to search
    // B : vector of available strings
    
    int wordBreak(string A, vector<string> &B) {
        //code here
        
        // Convert the dictionary to a set for faster lookup
        unordered_set<string> wordDict(B.begin(), B.end());
        
        int n = A.size();
        vector<bool> dp(n + 1, false);
        dp[0] = true; // Base case: empty string can be segmented

        // Fill the DP table
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j < i; j++) {
                if (dp[j] && wordDict.count(A.substr(j, i - j))) {
                    dp[i] = true;
                    break; // No need to check further if dp[i] is true
                }
            }
        }

        // Result is stored in dp[n], indicating if the entire string can be segmented
        return dp[n] ? 1 : 0;
    }
};
