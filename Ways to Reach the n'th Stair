// RECURSION
class Solution {
  public:
    int solve(int n) {
        // base case
        if(n <= 2) return n;
        
        // recusion
        return solve(n - 1) + solve(n - 2);
    }
    int countWays(int n) {
        // your code here
        return solve(n);
    }
};


// RECURSION + MEMOIZATION
class Solution {
  public:
    int solve(int n, vector<int>& dp) {
        // base case
        if(n <= 2) return n;
        
        if(dp[n] != -1) {
            return dp[n];
        }
        
        // recusion
        return dp[n] = solve(n - 1, dp) + solve(n - 2, dp);
    }
    int countWays(int n) {
        // your code here
        vector<int> dp(n + 1, -1);
        return solve(n, dp);
    }
};


// BOTTOM UP
class Solution {
  public:
    int countWays(int n) {
        // your code here
        if(n <= 2) return n;
        
        vector<int> dp(n + 1);
        dp[0] = 0;
        dp[1] = 1;
        dp[2] = 2;
        
        for(int i = 3; i <= n; i++) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        
        return dp[n];
    }
};


// FIBONNACCI 
class Solution {
  public:
    int countWays(int n) {
        // your code here
        if(n <= 2) return n;
        
        int prev1 = 1;
        int prev2 = 2;
        int cur = 0;
        
        for(int i = 3; i <= n; i++) {
            cur = prev1 + prev2;
            prev1 = prev2;
            prev2 = cur;
        }
        
        return cur;
    }
};
