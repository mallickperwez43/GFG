//User function Template for C++

class Solution {
  public:
    vector<vector<string>> ans;
    
    bool canMakePalindrome(int start, int end, string S){
        while(start < end){
            if(S[start] != S[end]){
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
    
    void solve(int idx, vector<string>& temp, string S){
        if(idx == S.size()){
            ans.push_back(temp);
            return;
        }
        
        for(int i = idx; i < S.size(); i++){
            if(canMakePalindrome(idx, i, S)){
                temp.push_back(S.substr(idx, i - idx + 1)); // DO
                solve(i + 1, temp, S);                      // EXPLORE 
                temp.pop_back();                            // UNDO
            }
        }
    }
    
    vector<vector<string>> allPalindromicPerms(string S) {
        // code here
        ans.clear();
        vector<string> temp;
        solve(0, temp, S);
        return ans;
    }
};


class Solution {
  public:
    
    bool isPalindrome(int s, int e, string& str) {
        while(s < e) {
            if(str[s] != str[e]) 
                return false;
            
            s++;
            e--;
        }
        
        return true;
    }
    
    void solve(int idx, int n, string& s, vector<string>& temp, vector<vector<string>>& result) {
        if(idx == n) {
            result.push_back(temp);
            return;
        }
        
        for(int i = idx; i < n; i++) {
            if(isPalindrome(idx, i, s)) {
                temp.push_back(s.substr(idx, i - idx + 1)); // Do
                solve(i + 1, n, s, temp, result);           // Explore
                temp.pop_back();                            // Undo
            }
        }
    }
    
    vector<vector<string>> palinParts(string &s) {
        // code here
        vector<vector<string>> result;
        vector<string> temp;
        int n = s.length();
        solve(0, n, s, temp, result);
        
        return result;
    }
};
