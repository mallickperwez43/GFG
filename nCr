// simple maths

class Solution {
  public:
    int nCr(int n, int r) {
        // code here
        if(r > n) return  0;
        
        
        //     n!
        //  ----------
        //  r! (n - r)!
        
        // n * (n - 1) * (n - 2) * ..... 2 * 1
        // -----------------------------------
        // r! * (n - r) * (n - r - 1) * (n - r - 2) * ..... (1)
        
        
        //    n * (n - 1) * (n - 2)
        //   ----------------------
        //              r!
    
        // eg n = 5, r = 2
        //   5!
        // ------
        // 2! 3!
        
        //   5 * 4 * 3 * 2 * 1
        // ---------------------
        // (1 * 2) ( 3 * 2 * 1)
        
        //   5 * 4
        //  -------
        //  2 * 1
        
        //   (n - r + 2) * (n - r + 1)
        //   -------------------------
        //         2     *      1
        
        
        //   (n - r + i)
        //   -----------
        //        i
        //   i -> [1, r]
        
        long long ans = 1;
        
        for(int i = 1; i <= r; i++) {
            ans = ans * (n - r + i) / i;
        }
        
        return (int)ans;
    }
};


// Fermat little theorem

class Solution {
  public:
    
    static const int M = 1e9 + 7;
    
    long long findPower(long long a, long long b) {
        if(b == 0) return 1;
        
        long long half = (findPower(a, b / 2) % M);
        long long result = (half * half) % M;
        
        if(b & 1) {
            result = (result * a) % M;
        }
        
        return result;
    }
    
    int nCr(int n, int r) {
        // code here
        if(r > n) return 0;
        if(r == 0 || r == n) return 1;
        
        vector<long long> fact(n + 1, 1);
        fact[0] = fact[1] = 1;
        
        for(int i = 2; i <= n; i++) {
            fact[i] = (fact[i - 1] * i) % M;
        }
        
        long long nume       = (fact[n]) % M;
        long long deno       = ((fact[r] % M) * (fact[n - r] % M)) % M;
        long long fermatDeno = findPower(deno, M - 2);
        
        return (int)((nume * fermatDeno) % M);
    }
};
