class Solution {
  public:
    long long getCost(vector<int>& heights, vector<int>& cost, int targetHeight) {
        long long totalCost = 0;
        
        for(int i = 0; i < heights.size(); i++) {
            totalCost += (1LL * abs(heights[i] - targetHeight) * cost[i]);
        }
        
        return totalCost;
    }
    int minCost(vector<int>& heights, vector<int>& cost) {
        // code here
        int low  = *min_element(heights.begin(), heights.end());
        int high = *max_element(heights.begin(), heights.end());
        
        long long result = LLONG_MAX;
        
        while(low <= high) {
            int mid = low + (high - low) / 2;
            
            long long costCurr = getCost(heights, cost, mid);
            long long costPrev = (mid > low) ? getCost(heights, cost, mid - 1) : LLONG_MAX;
            long long costNext = (mid < high) ? getCost(heights, cost, mid + 1) : LLONG_MAX;
            
            result = min({result, costCurr, costPrev, costNext});
            
            if(costPrev < costCurr) { // move left
                high = mid - 1;
            }
            else if(costNext < costCurr) { // move right
                low = mid + 1;
            }
            else {
                break; // got the min
            }
        }
        
        return (int)result;
    }
};
