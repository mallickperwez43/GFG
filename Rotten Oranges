class Solution {
  public:
    vector<vector<int>> directions = {{0, 1}, {0, -1}, {-1, 0}, {1, 0}};
    
    bool isValid(vector<vector<int>>& mat, int i, int j, int m, int n) {
        return (i >= 0 && i < m && j >= 0 && j < n && mat[i][j] == 1);
    }
    
    int orangesRotting(vector<vector<int>>& mat) {
        // Code here
        int m = mat.size();
        int n = mat[0].size();
        
        if(m == 0) return -1;
        
        queue<pair<int, int>> q; // {i, j};
        int freshCount = 0; // count of fresh oranges
        int timeReq = 0;
        
        // push all rotten oranges in a queue and count the fresh ones
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(mat[i][j] == 2) {
                    q.push(make_pair(i, j));
                }
                else if(mat[i][j] == 1) {
                    freshCount++;
                }
            }
        }
        
        if(freshCount == 0) return 0; // no fresh oranges to rotten
        
        // multisource BFS
        while(!q.empty()) {
            int size = q.size();
            int freshToRottenCnt = 0;
            
            while(size--) {
                pair<int, int> P = q.front();
                q.pop();
                
                int i = P.first;
                int j = P.second;
                
                for(auto& dir : directions) {
                    int i_ = i + dir[0];
                    int j_ = j + dir[1];
                    
                    if(isValid(mat, i_, j_, m, n)) {
                        freshToRottenCnt++;
                        freshCount--;
                        mat[i_][j_] = 2;
                        q.push(make_pair(i_, j_));
                    }
                }
            }
            
            if(freshToRottenCnt != 0) timeReq++;
        }
        
        return (freshCount == 0) ? timeReq : -1;
    }
};
