// STL

class Solution {
  public:
    void rearrange(vector<int> &arr, int x) {
        // code here
        stable_sort(arr.begin(), arr.end(), [&](int a, int b) {
            return abs(a - x) <  abs(b - x);
        });
        
        return;
    }
};

// MERGE SORT

class Solution {
  public:
    
    void merge(int low, int mid, int high, int x, vector<int>& arr) {
        vector<int> temp(high - low + 1, 0);
        int i = low; 
        int j = mid + 1;
        int k = 0;
        
        while(i <= mid && j <= high) {
            if(abs(arr[i] - x) <= abs(arr[j] - x)) {
                temp[k] = arr[i];
                i++;
            }
            else {
                temp[k] = arr[j];
                j++;
            }
            k++;
        }
        
        while(i <= mid) {
            temp[k] = arr[i];
            i++;
            k++;
        }
        
        while(j <= high) {
            temp[k] = arr[j];
            j++;
            k++;
        }
        
        k = 0;
        while(k < temp.size()) {
            arr[k + low] = temp[k];
            k++;
        }
        
        return;
    }
    
    void mergeSort(int low, int high, int x, vector<int>& arr) {
        if(low >= high)
            return;
        
        int mid = low + (high - low) / 2;
        
        mergeSort(low, mid, x, arr);
        mergeSort(mid + 1, high, x, arr);
        merge(low, mid, high, x, arr);
    }
    
    void rearrange(vector<int> &arr, int x) {
        // code here
        int n = arr.size();
        mergeSort(0, n - 1, x, arr);
        return;
    }
};
