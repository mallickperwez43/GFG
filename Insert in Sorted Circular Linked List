/* structure for a node
class Node {
 public:
  int data;
  Node *next;

  Node(int x){
      data = x;
      next = NULL;
  }
}; */

class Solution {
  public:
    Node* sortedInsert(Node* head, int data) {
        // code here
        Node* newNode = new Node(data);
        
        // case 1 : Empty list 
        if(head == NULL) {
            newNode -> next = newNode;
            return newNode;
        }
        
        // case 2 : Insert at head
        if(data <= head -> data) {
            Node* headPrev = head; // prev node to head
            
            while(headPrev -> next != head) {
                headPrev = headPrev -> next;
            }
            
            headPrev -> next = newNode;
            newNode -> next = head;
            return newNode; // newhead
        }
        
        // case 3 : Insert at middle
        Node* prev = head;
        Node* curr = head -> next;
        
        while(curr != head && curr -> data < data) {
            prev = curr;
            curr = curr -> next;
        }
        
        prev -> next = newNode;
        newNode -> next = curr;
        
        return head;
    }
};
