class Solution
{
    public:
    int n;
    int m;
    
    void DFS(int i, int j, vector<vector<char>>& grid){
        if(i < 0 || i >= n || j < 0 || j >= m || grid[i][j] != 'X'){
            return;
        }
        
        grid[i][j] = 'V'; // mark visited;
        
        DFS(i, j + 1, grid); // RIGHT
        DFS(i + 1, j, grid); // DOWN
        DFS(i, j - 1, grid); // LEFT
        DFS(i - 1, j, grid); // UP
    }
    
    //Function to find the number of 'X' total shapes.
    int xShape(vector<vector<char>>& grid) 
    {
        // Code here
        n = grid.size();
        m = grid[0].size();
        
        int shapesCnt = 0;
        
        for(int i = 0; i < n; i++){
            for(int j = 0; j < m; j++){
                if(grid[i][j] == 'X'){
                    DFS(i, j, grid);
                    shapesCnt++;
                }
            }
        }
        
        return shapesCnt;
    }
};
