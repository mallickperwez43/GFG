// Normal Binary Seacrh on Answers

class Solution {
  public:
    
    bool canAchieveTargetHeight(vector<int>& heights, int days, int windowSize, int targetHeight, int n) {
        vector<int> temp = heights; // copy to make changes in array
        
        for(int i = 0; i < n; i++) {
            if(temp[i] < targetHeight) {
                int heightDiff = targetHeight - temp[i];
                
                // add diff to  range [i, i + windowSize - 1]
                for(int j = i; j < n && j < i + windowSize; j++) {
                    temp[j] += heightDiff; 
                }
                
                days -= heightDiff; // the no of days left after acheiving target height
                if(days < 0)
                    return false;
            }
        }
        
        // finally check that all the heights should now be greater than equal to targetHeight
        for(int& ht : temp) {
            if(ht < targetHeight)
                return false;
        }
        
        return true;
    }
    
    int maxMinHeight(vector<int> &arr, int k, int w) {
        // code here
        int n = arr.size();
        int l = *min_element(arr.begin(), arr.end());
        int h = l + k; // max height
        int result = -1;
        
        while(l <= h) { // O(logk)
            int mid = l + (h - l) / 2;
            if(canAchieveTargetHeight(arr, k, w, mid, n)) { // O(n*w)
                result = mid;
                l = mid + 1;
            }
            else
                h = mid - 1;
        }
        
        return result;
    }
};

// TC : O(n* w * logk)
// SC : O(n)


// Optimal
// Since we need to update a fix size window continuesly
// We can use difference array technique to reduce the extra O(w) in the possible function

class Solution {
  public:
    
    bool canAchieveTargetHeight(vector<int>& heights, int days, int windowSize, int targetHeight, int n) {
        vector<int> waterEffect(n + 1, 0); // difference array for efficient range update
        
        int waterAddedSoFar = 0;
        int daysNeeded      = 0;
        
        for(int i = 0; i < n; i++) {
            waterAddedSoFar += waterEffect[i]; // extra height gained after watering
            int currHeight = heights[i] + waterAddedSoFar;
            
            if(currHeight < targetHeight) {
                int extraWaterNeed = targetHeight - currHeight;
                
                daysNeeded += extraWaterNeed;
                
                if(daysNeeded > days) 
                    return false;
                
                waterAddedSoFar += extraWaterNeed; // add the amount of water needed to make targetHeigh
                
                if(i + windowSize < n) // we only can update range [i, i + windowSize - 1]
                    waterEffect[i + windowSize] -= extraWaterNeed; 
            }
        }
        
        return true;
    }
    
    int maxMinHeight(vector<int> &arr, int k, int w) {
        // code here
        int n = arr.size();
        int l = *min_element(arr.begin(), arr.end());
        int h = l + k; // max height
        int result = -1;
        
        while(l <= h) { // O(logk)
            int mid = l + (h - l) / 2;
            if(canAchieveTargetHeight(arr, k, w, mid, n)) { // O(n*w)
                result = mid;
                l = mid + 1;
            }
            else
                h = mid - 1;
        }
        
        return result;
    }
};

// TC : O(n * logk)
// SC : O(n)
