// APPROACH 1 : DFS

class Solution {
  public:
    bool checkBipartiteDFS(vector<vector<int>>& adj, int curNode, vector<int>& color, int curColor){
        color[curNode] = curColor; // colored the curNode with curColor
        
        for(auto& nbr : adj[curNode]) {
            
            if(color[nbr] == color[curNode])
                return false;
                
            if(color[nbr] == -1) { // never colored (never visited)
                
                int colorOfNbr = 1 - curColor;
                
                if(checkBipartiteDFS(adj, nbr, color, colorOfNbr) == false)
                    return false;
            }
        }
        
        return true;
    }
    
    bool isBipartite(vector<vector<int>>& adj) {
        // Code here
        
        int V = adj.size();
        
        vector<int> color(V, -1); // no node is colored in the start
        // red -> 1
        // green -> 0
        
        for(int i = 0; i < V; i++) {
            if(color[i] == -1) {
                if(checkBipartiteDFS(adj, i, color, 1) == false)
                    return false;
            }
        }
        
        return true;
    }
};

// TC : O(V + E)
// SC : O(V)


// APPROACH 2 : BFS

class Solution {
  public:
    bool checkBipartiteBFS(vector<vector<int>>& adj, int curNode, vector<int>& color, int curColor) {
        queue<int> q;
        q.push(curNode);
        color[curNode] = curColor; // colored the curNode with curColor
        
        while(!q.empty()) {
            int u = q.front();
            q.pop();
             
            for(int& v : adj[u]) {
                if(color[v] == color[u])
                    return false;
                else if(color[v] == -1) { // never colored (never visited)
                    color[v] = 1 - color[u];
                    q.push(v);
                }
            }
        }
        
        return true;
    }
    
    bool isBipartite(vector<vector<int>>& adj) {
        // Code here
        
        int V = adj.size();
        
        vector<int> color(V, -1); // no one colored as of now
        // red = 1
        // green = 0
        
        for(int i = 0; i < V; i++) {
            if(color[i] == -1) {
                if(checkBipartiteBFS(adj, i, color, 1) == false)
                    return false;
            }
        }
        
        return true;
    }
};

// TC : O(V + E)
// SC : O(V)
