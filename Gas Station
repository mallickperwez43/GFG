// BRUTE FORCE - TLE
class Solution {
  public:
    int startStation(vector<int> &gas, vector<int> &cost) {
        // Your code here
        int n = gas.size();
        
        for(int i = 0; i < n; i++) {
            
            if(gas[i] < cost[i])
                continue;
            
            int j = (i + 1) % n; // circular
            
            int costForMovingFromThisStation = cost[i];
            
            int gasEarnInNextStation = gas[j];
            
            int curGas = gas[i] - costForMovingFromThisStation + gasEarnInNextStation;
            
            while(j != i) {
                
                if(curGas < cost[j]) 
                    break;
                
                int costForMovingFromThisJ = cost[j];
                
                j = (j + 1) % n;
                
                int gasEarnInNextStationJ = gas[j];
                
                curGas = curGas - costForMovingFromThisJ + gasEarnInNextStationJ;
            }
            
            if(j == i) {
                return i; // we completed full circle
            }
        }
        
        return -1;
    }
};


// OPTIMAL
class Solution {
  public:
    int startStation(vector<int> &gas, vector<int> &cost) {
        // Your code here
        int n = gas.size();
        
        int totalKamai = accumulate(gas.begin(), gas.end(), 0);
        int totalKharch = accumulate(cost.begin(), cost.end(), 0);
        
        if(totalKamai < totalKharch) {
            return -1;
        }
        
        int result_index = 0;
        int total = 0;
        
        for(int i = 0; i < n; i++) {
            
            total += gas[i] - cost[i];
            
            if(total < 0) {
                total = 0;
                result_index = i + 1;
            }
        }
        
        return result_index;
    }
};

// TC : O(n)
// SC: O(1)
