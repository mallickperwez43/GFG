// DSU (can also be done via dfs)

class DisjointSet {
  public:
    vector<int> parent, size;
    DisjointSet(int n){
        parent.resize(n + 1);
        size.resize(n + 1);
        for(int i = 0; i <= n; i++){
            parent[i] = i;
            size[i] = 1;
        }
    }
    
    int find(int node){
        if(node == parent[node]){
            return node;
        }
        
        return parent[node] = find(parent[node]);
    }
    
    void unionBySize(int u, int v){
        int uPar = find(u);
        int vPar = find(v);
        
        if(size[uPar] > size[vPar]){
            parent[vPar] = uPar;
            size[uPar] += size[vPar];
        }
        else{
            parent[uPar] = vPar;
            size[vPar] += size[uPar];
        }
    }
};

class Solution {
  public:
    int Solve(int n, vector<vector<int>>& edge) {
        // code here
        
        DisjointSet ds(n);
        // count no of extra edges in the same component
        int extraEdges = 0;
        for(vector<int>& it : edge){
            int u = it[0];
            int v = it[1];
            
            if(ds.find(u) == ds.find(v)){ // shared the same parent so an extra edge
                extraEdges++;
            }
            else{
                ds.unionBySize(u, v);
            }
        }
        
        // get the no of components
        int cntComp = 0;
        for(int i = 0; i < n; i++){
            if(ds.parent[i] == i){
                cntComp++;
            }
        }
        
        // min edges needed would be comp - 1
        return (extraEdges >= cntComp - 1) ? cntComp - 1 : -1;
    }
};
