class Solution
{
    public:
    int n , m;
    // U , R, D, L
    int dirX[4] = {-1, 0, 1, 0};
    int dirY[4] = {0, 1, 0, -1};
    
    bool isValid(int r, int c, vector<vector<int>>& grid){
        return (r >= 0 && r < n && c >= 0 && c < m && grid[r][c] != 0);
    }
    
    //Function to find whether a path exists from the source to destination.
    bool is_Possible(vector<vector<int>>& grid) 
    {
        //code here
        int sx, sy, tx, ty;
        n = grid.size();
        m = grid[0].size();
        
        // populate the source and target coordinates
        for(int r = 0; r < n; r++){
            for(int c = 0; c < m; c++){
                if(grid[r][c] == 1){
                    sx = r;
                    sy = c;
                }
                else if(grid[r][c] == 2){
                    tx = r;
                    ty = c;
                }
            }
        }
        
        // BFS
        queue<pair<int, int>> q; // {r, c}
        q.push(make_pair(sx, sy));
        grid[sx][sy] = 0; // mark visited
        
        while(!q.empty()){
            int row = q.front().first;
            int col = q.front().second;
            q.pop();
            
            if(row == tx && col == ty){
                return true;
            }
            
            // explore all 4 dirn
            for(int i = 0; i < 4; i++){
                int newR = row + dirX[i];
                int newC = col + dirY[i];
                
                if(isValid(newR, newC, grid)){
                    grid[newR][newC] = 0; // mark visited
                    q.push(make_pair(newR, newC));
                }
            }
        }
        
        return false;
    }
};
