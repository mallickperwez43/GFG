// RECURSION + MEMOIZATION

class Solution {
  public:
   
    int solve(int i, int j, int m, int n, vector<vector<int>> &grid, vector<vector<int>>& dp) {
        
        if(i >= m || j >= n || grid[i][j] == 1) {
            return 0;
        }
        
        if(i == m - 1 && j == n - 1)
            return 1;
        
        if(dp[i][j] != -1)
            return dp[i][j];
        
        int right = solve(i, j + 1, m, n, grid, dp);
        int down  = solve(i + 1, j, m, n, grid, dp);
        
        return dp[i][j] = right + down;
    }
   
    int uniquePaths(vector<vector<int>> &grid) {
        // code here
        int m = grid.size();
        int n = grid[0].size();
        
        if(grid[0][0] == 1) 
            return 0;
        
        vector<vector<int>> dp(m, vector<int>(n, -1));
        
        return solve(0, 0, m, n, grid, dp);
    }
};

// TC : O(m * n)
// SC : O(m * n)


// BOTTOM UP

class Solution {
  public:
    int uniquePaths(vector<vector<int>> &grid) {
        // code here
        int m = grid.size();
        int n = grid[0].size();
        
        if(grid[0][0] == 1) 
            return 0;
        
        vector<vector<int>> dp(m, vector<int>(n, 0));
        // dp[i][j] = no of unique ways to reach cell (i, j)
        
        dp[0][0] = 1;
        
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                if(grid[i][j] == 1 || (i == 0 && j == 0)) {
                    continue;
                }
                
                int left = (j > 0) ? dp[i][j - 1] : 0;
                int up   = (i > 0) ? dp[i - 1][j] : 0;
                
                dp[i][j] = left + up;
            }
        }
        
        return dp[m - 1][n - 1];
    }
};

// TC : O(m * n)
// SC : O(m * n)
