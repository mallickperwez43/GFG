/*Complete the function below

struct Node {
    int data;
    Node *left;
    Node *right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};
*/

class Solution {
  public:
    int ans = -1;
    int countNode = 0;
    void solve(Node* root, int k){
        if(root == NULL){
            return;
        }
        
        solve(root -> left, k);
        
        countNode++;
        if(countNode == k){
            ans = root -> data;
            return;
        }
        
        solve(root -> right, k);
    }
    
    // Return the Kth smallest element in the given BST
    int KthSmallestElement(Node *root, int K) {
        // add code here.
        solve(root, K);
        return ans;
    }
};


// way 2

/*
class Node {
  public:
    int data;
    Node* left;
    Node* right;

    Node(int val) {
        data = val;
        left = right = NULL;
    }
};
*/

class Solution {
  public:
    
    void dfs(Node* root, int& k, int& result, int& nodeCnt) {
        if(root == NULL) {
            return;
        }
        
        dfs(root -> left, k, result, nodeCnt);
        
        nodeCnt++;
        
        if(nodeCnt == k) {
            result = root -> data;
            return;
        }
        
        dfs(root -> right, k, result, nodeCnt);
    }
    
    int kthSmallest(Node *root, int k) {
        // code here
        int result = -1;
        int nodeCnt = 0;
        
        dfs(root, k, result, nodeCnt);
        
        return result;
    }
};
