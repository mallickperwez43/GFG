class Solution {
  public:
    vector<int> parent;
    vector<int> rank;
    
    int find(int x) {
        if(parent[x] == x) {
            return x;
        }
        
        return parent[x] = find(parent[x]); // path compression
    }
    
    void Union(int x, int y) {
        int x_parent = find(x);
        int y_parent = find(y);
        
        if(x_parent == y_parent) {
            return;
        }
        
        if(rank[x_parent] > rank[y_parent]) {
            parent[y_parent] = x_parent;
        }
        else if(rank[x_parent] < rank[y_parent]) {
            parent[x_parent] = y_parent;
        }
        else {
            parent[x_parent] = y_parent;
            rank[y_parent]++;
        }
    }
    
    vector<vector<int>> connectedcomponents(int v, vector<vector<int>>& edges) {
        // code here
        
        parent.resize(v);
        rank.resize(v);
        
        for(int i = 0; i < v; i++) {
            parent[i] = i;
            rank[i] = 1;
        }
        
        for(vector<int>& edge : edges) {
            int u_ = edge[0];
            int v_ = edge[1];
            
            Union(u_, v_);
        }
        
        unordered_map<int, vector<int>> parentToChild;
        for(int i = 0; i < v; i++) {
            int par = find(i);
            parentToChild[par].push_back(i);
        }
        
        vector<vector<int>> result;
        
        for(auto& it : parentToChild) {
            result.push_back(it.second);
        }
        
        return result;
    }
};
