//User function Template for C++

class Solution {
public:
    int r, c;
    int dirX[4] = {0, 1, 0, -1};
    int dirY[4] = {1, 0, -1, 0};
    
    bool isValid(int i, int j, int r, int c, vector<vector<int>>& hospital){
        return (i >= 0 && i < r && j >= 0 && j < c && hospital[i][j] == 1);
    }
    
    int helpaterp(vector<vector<int>> hospital)
    {
        //code here
        r = hospital.size();    
        c = hospital[0].size();
        
        int freshPatient = 0;
        int timeReq = 0;
        
        queue<pair<int, int>> q;
        for(int i = 0; i < r; i++){
            for(int j = 0; j < c; j++){
                if(hospital[i][j] == 2){
                    q.push(make_pair(i, j));
                }
                else if(hospital[i][j] == 1){
                    freshPatient++;
                }
            }
        }
        
        if(freshPatient == 0) return 0; // no uninfected patient is there 
        
        while(!q.empty()){
            int size = q.size();
            int infectedCnt = 0;
            
            while(size--){
                pair<int, int> p = q.front();
                q.pop();
                
                int curR = p.first;
                int curC = p.second;
                
                for(int i = 0; i < 4; i++){
                    int newR = curR + dirX[i];
                    int newC = curC + dirY[i];
                    
                    if(isValid(newR, newC, r, c, hospital)){
                        infectedCnt++;
                        hospital[newR][newC] = 2;
                        q.push(make_pair(newR, newC));
                    }
                }
            }
            
            if(infectedCnt != 0) timeReq++; // iterated a level
        }
        
        for(int i = 0; i < r; i++){
            for(int j = 0; j < c; j++){
                if(hospital[i][j] == 1){
                    timeReq = INT_MAX;
                    break;
                }
            }
        }
        
        return (timeReq == INT_MAX ? -1 : timeReq);
    }
};
