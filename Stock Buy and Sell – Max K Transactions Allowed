class Solution {
  public:
    int solve(vector<int>& prices, int k, int idx, bool canBuy, vector<vector<vector<int>>>& dp) {
        // base case
        if(idx == prices.size() || k == 0) {
            return 0;
        }
        
        if(dp[idx][k][canBuy] != -1) {
            return dp[idx][k][canBuy];
        }
        
        // recursion
        int involve = 0;
        int ignore = 0;
        if(canBuy == true) { // can buy or ignore
            involve = -prices[idx] + solve(prices, k , idx + 1, false, dp); // buy
            ignore = solve(prices, k, idx + 1, true, dp);
        }
        else { // can sell or ignore
            involve = prices[idx] + solve(prices, k - 1, idx + 1, true, dp); // sell
            ignore = solve(prices, k, idx + 1, false, dp);
        }
        
        return dp[idx][k][canBuy] = max(involve, ignore);
    }
    
    int maxProfit(vector<int>& prices, int k) {
        // code here
        int n = prices.size();
        vector<vector<vector<int>>> dp(n + 1, vector<vector<int>>(k + 1, vector<int>(2, -1)));
        return solve(prices, k, 0, true, dp);
    }
};
