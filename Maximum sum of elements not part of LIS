class Solution {
  public:
    int nonLisMaxSum(vector<int>& arr) {
        // code here
        int n = arr.size();
        int totalSum = accumulate(arr.begin(), arr.end(), 0);
        int maxLen = 1; // max length of longest increasing subsequence
        int lisSum = INT_MAX; 
        
        vector<int> len(n, 1); // length of longest increasing subsequence
        vector<int> sum(n); // sum of the longest increasing subsequence
        
        for(int i = 0; i < n; i++) {
            sum[i] = arr[i];
            for(int j = 0; j < i; j++) {
                if(arr[j] < arr[i] && len[j] + 1 >= len[i]) {
                    len[i] = len[j] + 1;
                    sum[i] = sum[j] + arr[i];
                }
            }
            maxLen = max(maxLen, len[i]);
        }
        
        // edge case
        // when 2 or more subsequences have same maxLen then consider min one
        for(int i = 0; i < n; i++) {
            if(len[i] == maxLen) {
                lisSum = min(lisSum, sum[i]);
            }
        }
        
        return totalSum - lisSum;
    }
};
