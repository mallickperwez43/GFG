// User function template for C++

// arr : given array
// n : size of arr
// index : need to update
// new_val : given value to which we need to update index
// st : constructed segment-tree

ll sumQuery(int qs, int qe, int i, int s, int e, ll *st) {
    if(s > qe || e < qs) { // out of bound
        return 0;
    }
    
    if(s >= qs && e <= qe) { // withing range
        return st[i];
    }
    
    int mid = s + (e - s) / 2;
    
    int left  = sumQuery(qs, qe, 2 * i + 1, s, mid, st);
    int right = sumQuery(qs, qe, 2 * i + 2, mid + 1, e, st);
    
    return left + right;
}

void updateQuery(int index, int new_val, int i, int s, int e, ll *st) {
    // base case
    if(s == e) {
        st[i] = new_val;
        return;
    }
    
    int mid = s + (e - s) / 2;
    
    if(index <= mid) {
        updateQuery(index, new_val, 2 * i + 1, s, mid, st);
    }
    else {
        updateQuery(index, new_val, 2 * i + 2, mid + 1, e, st);
    }
    
    st[i] = st[2 * i + 1] + st[2 * i + 2];
}

//Function to update a value in input array and segment tree.
void updateValue(int *arr, ll *st, int n, int index, int new_val) 
{
    // add code here
    arr[index] = new_val;
    updateQuery(index, new_val, 0, 0, n - 1, st);
}

//Function to return sum of elements in range from index qs (query start)
//to qe (query end).
ll getsum(ll *st, int n, int l, int r)
{
    // add code here
    return sumQuery(l, r, 0, 0, n - 1, st);
}
