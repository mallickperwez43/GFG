class Solution {
  public:
    vector<int> farMin(vector<int>& arr) {
        // code here
        int n = arr.size();
        
        // Build the suffix minimum array
        vector<int> suffixMin(n);
        suffixMin[n - 1] = arr[n - 1];
        for(int i = n - 2; i >= 0; i--) {
            suffixMin[i] = min(arr[i], suffixMin[i + 1]);
        }
        
        // For each index use binary search on suffixMin array from range i + 1 to n - 1
        vector<int> result(n);
        for(int i = 0; i < n; i++) {
            int low  = i + 1; 
            int high = n - 1;
            int resIdx = -1;
            
            while(low <= high) {
                int mid = low + (high - low) / 2;
                
                if(suffixMin[mid] < arr[i]) {
                    resIdx = mid; // a valid candidate
                    low = mid + 1; // try further right
                }
                else {
                    high = mid - 1; // try smaller left
                }
            }
            
            result[i] = resIdx;
        }
        
        return result;
    }
};
