class Solution {
  public:
    
    int atMostK(string& s, int k) {
        int n = s.length();
        vector<int> freq(26, 0);
        
        int uniqueChCnt = 0;
        int result      = 0;
        
        int i = 0;
        int j = 0;
        
        while(j < n) {
            if(freq[s[j] - 'a'] == 0) uniqueChCnt++;
            
            freq[s[j] - 'a']++;
            
            while(uniqueChCnt > k) {
                freq[s[i] - 'a']--;
                if(freq[s[i] - 'a'] == 0) uniqueChCnt--;
                i++;
            }
            
            result += (j - i + 1);
            
            j++;
        }
        
        return result;
    }
    
    int countSubstr(string& s, int k) {
        // code here.
        int substrCntAtMostK = atMostK(s, k);
        int substrCntAtMostKminus1 = atMostK(s, k - 1);
        
        return substrCntAtMostK - substrCntAtMostKminus1;
    }
};
