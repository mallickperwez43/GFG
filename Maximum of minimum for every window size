class Solution {
  public:
    
    vector<int> nextSmaller(vector<int>& arr, int n) {
        vector<int> nse(n, n); // Intialize with n(out of bound)
        stack<int> st; // store indices
        
        for(int i = n - 1; i >= 0; i--) {
            while(!st.empty() && arr[st.top()] >= arr[i]) { // maintain monotonous nature
                st.pop();
            }
            
            if(!st.empty()) nse[i] = st.top();
            
            st.push(i);
        }
        
        return nse;
    }
    
    vector<int> prevSmaller(vector<int>& arr, int n) {
        vector<int> pse(n, -1); // Intialize with -1
        stack<int> st; // store indices
        
        for(int i = 0; i < n; i++) {
            while(!st.empty() && arr[st.top()] >= arr[i]) { // maintain monotonous nature
                st.pop();
            }
            
            if(!st.empty()) pse[i] = st.top();
            
            st.push(i);
        }
        
        return pse;
    }
    
    vector<int> maxOfMins(vector<int>& arr) {
        // Your code here
        int n = arr.size();
        vector<int> nextSmallerArr = nextSmaller(arr, n);
        vector<int> prevSmallerArr = prevSmaller(arr, n);
        vector<int> result(n + 1, 0);
        
        for(int i = 0; i < n; i++) { 
            int len = nextSmallerArr[i] - prevSmallerArr[i] - 1; // range
            result[len] = max(result[len], arr[i]); // get answers in range
        }
        
        // fill the unfilled ones
        for(int i = n - 1; i >= 0; i--) {
            result[i] = max(result[i], result[i + 1]);
        }
        
        // shift all the entries to left from right
        vector<int> ans(n);
        for(int i = 1; i <= n; i++) {
            ans[i - 1] = result[i];
        }
        
        return ans;
    }
};
