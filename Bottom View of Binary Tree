// BFS

class Solution {
  public:
    vector <int> bottomView(Node *root) {
        // Your Code Here
        vector<int> ans;
        
        if(root == NULL){
            return ans;
        }
        
        unordered_map<int, int> bottomNode;
        queue<pair<Node*, int>> q;
        
        q.push(make_pair(root, 0));
        int mini = 0;
        int maxi = 0;
        
        while(!q.empty()){
            pair<Node*, int> top = q.front();
            q.pop();
            
            Node* cur = top.first;
            
            int nodeVal = cur -> data;
            int hd = top.second;
            
            bottomNode[hd] = nodeVal;
            mini = min(mini, hd);    
            maxi = max(maxi, hd);
            
            if(cur -> left){
                q.push(make_pair(cur -> left, hd - 1));
            }
            
            if(cur -> right){
                q.push(make_pair(cur -> right, hd + 1));
            }
        }
        
        for(int i = mini; i <= maxi; i++){
            ans.push_back(bottomNode[i]);   
        }
        
        return ans;
    }
};

// TC : O(n)
// SC : O(n)



// DFS

class Solution {
  public:
    
    void dfs(Node* root, int hd, int level, int& maxi, int& mini, unordered_map<int, pair<int, int>>& mp) {
        if(root == NULL)
            return;
        
        maxi = max(maxi, hd);
        mini = min(mini, hd);
        
        if(mp.find(hd) == mp.end() || level >= mp[hd].second) {
            mp[hd] = {root -> data, level};
        }
        
        dfs(root -> left, hd - 1, level + 1, maxi, mini, mp);
        dfs(root -> right, hd + 1, level + 1, maxi, mini, mp);
    }
    
    vector<int> bottomView(Node *root) {
        // code here
        if(root == NULL) {
            return {};
        }
        
        unordered_map<int, pair<int, int>> mp; // horizontal distance -> {node, level}
        int maxi = INT_MIN;
        int mini = INT_MAX;
        
        dfs(root, 0, 0, maxi, mini, mp);
        
        vector<int> result;
        for(int i = mini; i <= maxi; i++) {
            result.push_back(mp[i].first);
        }
        
        return result;
    }
};
