/*
struct Node {
  int data;
  struct Node *next;
  Node(int x) {
    data = x;
    next = NULL;
  }
};
*/
#include<vector>
class Solution{
  private:
    bool checkPalindrome(vector<int> v){
        int start = 0, end = v.size() - 1;
        
        while(start <= end){
            if(v[start] != v[end]){
                return false;
            }
            start++;
            end--;
        }
        return true;
    }
  public:
    //Function to check whether the list is palindrome.
    bool isPalindrome(Node *head)
    {
        //Your code here
        vector<int> v;
        
        Node* cur = head;
        while(cur != NULL){
            v.push_back(cur -> data);
            cur = cur -> next;
        }
        
        return checkPalindrome(v);
    }
};

TC : O(N) 
SC : O(N)

// optimised
/*
struct Node {
  int data;
  struct Node *next;
  Node(int x) {
    data = x;
    next = NULL;
  }
};
*/

class Solution{
  private:
    Node* getMid(Node* head){
        Node* slow = head;
        Node* fast = head -> next;
        
        while(fast != NULL and fast -> next != NULL){
            fast = fast -> next -> next;
            slow = slow -> next;
        }
        return slow;
    }
    
    Node* reverse(Node* head){
        Node* cur = head;
        Node* prev = NULL;
        Node* ahead = NULL;
        
        while(cur != NULL){
            ahead = cur -> next;
            cur -> next = prev;
            prev = cur;
            cur = ahead;
        }
        return prev;
    }
  public:
    //Function to check whether the list is palindrome.
    bool isPalindrome(Node *head)
    {
        //Your code here
        if(head == NULL or head -> next == NULL){
            return true;
        }
        
        // step 1 -> find middle
        Node* middle = getMid(head);
        
        // step 2 -> reverse linked list after middle
        Node* temp = middle -> next;
        middle -> next = reverse(temp);
        
        // step 3 -> compare both halves
        Node* head1 = head;
        Node* head2 = middle -> next;
        
        while(head2 != NULL){
            if(head1 -> data != head2 -> data){
                return false;
            }
            head1 = head1 -> next;
            head2 = head2 -> next;
        }
        
        // step4 -> repeat step 2 (optional)
        temp =  middle -> next;
        middle -> next = reverse(temp);
        
        return true;
    }
};
TC : O(N) 
SC : O(1)
