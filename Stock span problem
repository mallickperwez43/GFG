// BRUTE FORCE

class Solution {
  public:
    vector<int> calculateSpan(vector<int>& arr) {
        // write code here
        int n = arr.size();
        vector<int> result(n, -1);
        
        result[0] = 1;
        
        for(int cur = 1; cur < n; cur++) {
            int span = 1;
            
            for(int prev = cur - 1; (prev >= 0 && arr[cur] >= arr[prev]); prev--) {
                span++;
            }
            
            result[cur] = span;
        }
        
        return result;
    }
};

// TC : O(n * n)
// SC : O(1)


// OPTIMAL

class Solution {
  public:
    vector<int> calculateSpan(vector<int>& arr) {
        // write code here
        int n = arr.size();
        vector<int> result(n, -1);
        stack<pair<int, int>> st; // {price, span}
        
        for(int i = 0; i < n; i++) {
            int price = arr[i];
            int span  = 1;
            
            while(!st.empty() && price >= st.top().first) { // keep adding spans and poping the lesser or equal price values
                span += st.top().second;
                st.pop();
            }
            
            st.push({price, span});
            result[i] = span;
        }
        
        return result;
    }
};

// TC : O(n)
// SC : O(n)
