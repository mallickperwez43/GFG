class Solution{
    public:
    int findSubArraySum(int Arr[], int N, int k)
    {
        // code here
        unordered_map<int, int> mp; // {sum, occurance}
        int sum = 0;
        int ans = 0;
        
        for(int i = 0; i < N; i++){
            sum += Arr[i];
            
            if(sum == k){
                ans++;
            }
            
            int remainSum = sum - k;
            if(mp.find(remainSum) != mp.end()){
                ans += mp[remainSum];
            }
            
            mp[sum]++;
        }
        
        return ans;
    }
};


// method 2

class Solution {
  public:
    int cntSubarrays(vector<int> &arr, int k) {
        // code here
        unordered_map<int, int> mp;
        // {prefixSum -> freq}
        mp[0] = 1;
        
        int prefixSum = 0;
        int count     = 0;
        
        for(int& el : arr) {
            prefixSum += el;
            
            int remainSum = prefixSum - k;
            if(mp.count(remainSum))
                count += mp[remainSum];
            
            mp[prefixSum]++;
        }
        
        return count;
    }
};
