class Solution {
  public:
  
    bool isVowel(char& ch) {
        return ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u';
    }
    
    int factorial(int n) {
        int fact = 1;
        for(int i = 2; i <= n; i++)
            fact *= i;
        
        return fact;
    }
    
    int vowelCount(string& s) {
        // code here
        unordered_map<char, int> mp; // to store the freq of all the vowels
        for(char& ch : s) {
            if(isVowel(ch))
                mp[ch]++;
        }
        
        int uniqueVowels = mp.size();
        if(uniqueVowels == 0) return 0; // no vowels case
        
        int ways = 1;
        for(auto& it : mp) {
            char ch  = it.first;
            int freq = it.second;
            
            // a a a e e i i i o u u u
            // a -> 3
            // e -> 2
            // i -> 3
            // o -> 1
            // u -> 3
            // total chosing ways = f[a] * f[e] * f[i] * f[o] * f[u]
            // 3 * 2 * 3 * 1 * 3
            
            ways *= freq;
        }
        
        // a a a e e i i i o u u u
        // a -> 3
        // e -> 2
        // i -> 3
        // o -> 1
        // u -> 3
        
        // a1e1i1o1u1
        // a2e1i1o1u1
        // a3e1i1o1u1
        // 3 permuations for a.. similar for all factorial
        
        int fact = factorial(uniqueVowels);
        
        return ways * fact;
    }
};
