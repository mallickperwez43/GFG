// Recurision + Memoization

class Solution {
  public:
    int m , n, N;
    
    bool solve(int i, int j, string& s1, string& s2, string& s3, vector<vector<int>>& dp) {
        
        if(i == m && j == n && i + j == N) {
            return true;
        }
        
        if(i + j >= N) { // other string didnt get consumed at all
            return false;
        }
        
        if(dp[i][j] != -1) {
            return dp[i][j];
        }
        
        bool result = false;
        
        if(s1[i] == s3[i + j]) {
            result = solve(i + 1, j, s1, s2, s3, dp);
        }
        
        if(result == true) {
            return dp[i][j] = result;
        }
        
        if(s2[j] == s3[i + j]) {
            result = solve(i, j + 1, s1, s2, s3, dp);
        }
        
        return dp[i][j] = result;
    }
    
    bool isInterleave(string& s1, string& s2, string& s3) {
        // code here
        m = s1.length();
        n = s2.length();
        N = s3.length();
        
        if(m + n != N){
            return false;
        }
        
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, -1));
        
        return solve(0, 0 , s1, s2, s3, dp);
    }
};


// Bottom Up

class Solution {
  public:
    bool isInterleave(string& s1, string& s2, string& s3) {
        // code here
        int m = s1.length();
        int n = s2.length();
        int N = s3.length();
        
        if(m + n != N) {
            return false;
        }
        
        vector<vector<bool>> dp(m + 1, vector<bool>(n + 1, false));
        // dp[i][j] = can form s3[0... i + j - 1] interleving s1[0 .. i - 1] & s2[0 .. j - 1]
        
        dp[0][0] = true; //s1 = "" s2 = "" s3 = ""
        
        // fill the first row checking s2 and s3
        for(int j = 1; j <= n; j++) {
            dp[0][j] = dp[0][j - 1] && (s2[j - 1] == s3[j - 1]);
        }
        
        // fill the first col checking s1 and s3
        for(int i = 1; i <= m; i++) {
            dp[i][0] = dp[i - 1][0] && (s1[i - 1] == s3[i - 1]);
        }
        
        // fill the rest considering both cases
        
        for(int i = 1; i <= m; i++) {
            for(int j = 1; j <= n; j++) {
                dp[i][j] = (dp[i - 1][j] && s1[i - 1] == s3[i + j - 1]) ||
                           (dp[i][j - 1] && s2[j - 1] == s3[i + j - 1]);
            }
        }
        
        return dp[m][n];
    }
};
