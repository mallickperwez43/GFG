// Using custom Binary Search(Upper Bound)

class Solution {
  public:
    
    int custom_upper_bound(vector<int>& arr, int target) {
        int l = 0;
        int r = arr.size() - 1;
        int res = arr.size(); // max range less than or eqaul to any target
        
        while(l <= r) {
            int mid = l + (r - l) / 2;
            
            if(arr[mid] > target) {
                res = mid; // possible answer
                r = mid - 1; // try to go left to find smaller
            }
            else 
                l = mid + 1; // try to go right to find bigger
        }
        
        return res;
    }
    
    vector<int> countLessEq(vector<int>& a, vector<int>& b) {
        // code here
        sort(b.begin(), b.end()); // O(mlogm)
        vector<int> result;
        for(int& el : a) { // O(n)
            result.push_back(custom_upper_bound(b, el)); // O(logm)
        }
        
        return result;
    }
};

// TC : O(mlogm + nlogm) ~ O((m + n) * logm)
// SC : O(m) if we use another vector to store vector b



// Another way
// Prefix Sum + array

class Solution {
  public:
    vector<int> countLessEq(vector<int>& a, vector<int>& b) {
        // code here
        int maxELInA = *max_element(a.begin(), a.end());
        int maxELInB = *max_element(b.begin(), b.end());
        int maxEL    = max(maxELInA, maxELInB);
        
        vector<int> countB(maxEL + 1, 0);
        for(int& el : b) {
            countB[el]++;
        }
        
        for(int i = 1; i <= maxEL; i++) {
            countB[i] += countB[i - 1]; // prefix sum to store elements less than or equal to ith El
        }
        
        vector<int> result;
        for(int& el : a) { // O(n)
            result.push_back(countB[el]);
        }
        
        return result;
    }
};

// TC : O(m + n + maxEL)
// SC : O(maxEL)
