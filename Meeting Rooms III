// BRUTE FORCE -> TLE 

class Solution {
  public:
    int mostBooked(int n, vector<vector<int>> &meetings) {
        // code here
        int m = meetings.size();
        
        // sort meetings by starting time
        sort(meetings.begin(), meetings.end());
        
        // lastAvailableAt[i] = ith room will be last available at 
        vector<long long> lastAvailableAt(n, 0); 
        
        // roomsUsedCount[i] = ith room used how mant times
        vector<int> roomsUsedCount(n, 0);
        
        for(vector<int>& meet : meetings) {
            
            int start = meet[0];
            int end   = meet[1];
            int duration = end - start;
            bool found = false;
            
            long long earlyEndRoomTime = LLONG_MAX;
            int earlyEndRoom     = 0;
            
            // find the first available room for cur meeting
            for(int room = 0; room < n; room++) {
                
                if(lastAvailableAt[room] <= start) {
                    lastAvailableAt[room] = end; 
                    roomsUsedCount[room]++;
                    found = true;
                    break;
                }
                
                if(lastAvailableAt[room] < earlyEndRoomTime) {
                    earlyEndRoomTime = lastAvailableAt[room];
                    earlyEndRoom     = room;
                }
            }
            
            // if i couldnt find any room
            if(!found) {
                // pick that room which will end first
                lastAvailableAt[earlyEndRoom] += duration;
                roomsUsedCount[earlyEndRoom]++;
            }
        }
        
        int resultRoom = -1;
        int maxUsed    = -1;
        
        for(int room = 0; room < n; room++) {
            if(roomsUsedCount[room] > maxUsed) {
                maxUsed = roomsUsedCount[room];
                resultRoom = room;
            }
        }
        
        return resultRoom;
    }
};

// TC : O(mlogm + m * n)
// SC : O(2n)


// OPTIMAL -> heap

// User function Template for C++
class Solution {
  public:
    typedef pair<long long, int> P;
    
    int mostBooked(int n, vector<vector<int>> &meetings) {
        // code here
        int m = meetings.size();
        
        // sort meetings based on their start time
        sort(meetings.begin(), meetings.end());
        
        // roomsUsedCount[i] = how many times ith room is used
        vector<int> roomsUsedCount(n, 0);
        
        priority_queue<P, vector<P>, greater<P>> usedRooms;
        priority_queue<int, vector<int>, greater<int>> availableRooms;
        
        for(int room = 0; room < n; room++) {
            availableRooms.push(room);
        }
        
        for(vector<int>& meet : meetings) {
            int start = meet[0];
            int end   = meet[1];
            int duration = end - start;
            
            // before starting this cur meet which rooms can be made available
            while(!usedRooms.empty() && usedRooms.top().first <= start) {
                int room = usedRooms.top().second;
                usedRooms.pop();
                availableRooms.push(room);
            }
            
            if(!availableRooms.empty()) {
                int room = availableRooms.top();
                availableRooms.pop();
                usedRooms.push({end, room});
                roomsUsedCount[room]++;
            }
            else {
                // we dont have any available rooms now
                int room = usedRooms.top().second;
                long long endTime = usedRooms.top().first;
                usedRooms.pop();
                
                usedRooms.push({endTime + duration, room});
                roomsUsedCount[room]++;
                
            }
        }
        
        int resultRoom = -1;
        int maxUsed    = -1;
        
        for(int room = 0; room < n; room++) {
            if(roomsUsedCount[room] > maxUsed) {
                maxUsed    = roomsUsedCount[room];
                resultRoom = room;
            }
        }
        
        return resultRoom;
    }
};

// TC : O(m * logn)
// SC : O(n)
