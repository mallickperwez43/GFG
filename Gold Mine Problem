class Solution {
  public:
    
    int solve(int i, int j,int m, int n, vector<vector<int>>& mat, vector<vector<int>>& dp) {
        // base case - out of bound
        if(i < 0 || i >= m || j < 0 || j >= n)
            return 0;
        
        if(dp[i][j] != -1) 
            return dp[i][j];
        
        int up    = solve(i - 1, j + 1, m, n, mat, dp);
        int right = solve(i, j + 1, m, n, mat, dp);
        int down  = solve(i + 1, j + 1, m, n, mat, dp);
        
        return dp[i][j] = mat[i][j] + max({up, right, down});
    }
    
    int maxGold(vector<vector<int>>& mat) {
        // code here
        int m = mat.size();
        int n = mat[0].size();
        
        vector<vector<int>> dp(m + 1, vector<int>(n + 1, -1));
        
        int result = 0;
        
        // we can start from any row in first column
        // dfs from every cell of column one to get the max answer
        for(int i = 0; i < m; i++) {
            int cur = solve(i, 0, m, n, mat, dp);
            
            result = max(result, cur);
        }
        
        return result;
    }
};

class Solution{
public:
    int maxGold(int n, int m, vector<vector<int>> M)
    {
        // code here
        int ans = 0;
        for(int j = 1 ; j < m ; j++){
            for(int i = 0 ; i < n ; i++){
                int mx = INT_MIN;
                if(i - 1 >= 0 && j - 1 >= 0)    mx = max(mx,M[i - 1][j - 1]);
                if(j - 1 >= 0)                  mx = max(mx,M[i][j - 1]);
                if(i + 1 < n && j - 1 >= 0)     mx = max(mx,M[i + 1][j - 1]);
                M[i][j] += mx;
                ans = max(ans,M[i][j]);
            }
        }
        return ans;
    }
};
