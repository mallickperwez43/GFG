class Solution {
  public:
    
    vector<int> nextSmaller(vector<int>& heights, int size) {
        stack<int> st;
        st.push(size);
        vector<int> next(size);
        
        for(int i = size - 1; i >= 0; i--) {
            while(st.top() != size && heights[st.top()] >= heights[i]) {
                st.pop();
            }
            next[i] = st.top();
            st.push(i);
        }
        
        return next;
    }
    
    vector<int> prevSmaller(vector<int>& heights, int size) {
        stack<int> st;
        st.push(-1);
        vector<int> prev(size);
        
        for(int i = 0; i < size; i++) {
            while(st.top() != -1 && heights[st.top()] >= heights[i]) {
                st.pop();
            }
            prev[i] = st.top();
            st.push(i);
        }
        
        return prev;
    }
  
    int largestRectangleArea(vector<int>& heights, int size) {
        vector<int> next = nextSmaller(heights, size);
        vector<int> prev = prevSmaller(heights, size);
        
        int curArea = 0;
        
        for(int i = 0; i < size; i++) {
            int length  = heights[i];
            int breadth = next[i] - prev[i] - 1;
            curArea = max(curArea, length * breadth);
        }
        
        return curArea;
    }
    
    int maxArea(vector<vector<int>> &mat) {
        // code here
        int m = mat.size();
        int n = mat[0].size();
        
        int area = largestRectangleArea(mat[0], n); 
        
        for(int i = 1; i < m; i++) {
            for(int j = 0; j < n; j++) {
                mat[i][j] = (mat[i][j]) ? mat[i][j] + mat[i - 1][j] : 0;
            }
            area = max(area, largestRectangleArea(mat[i], n)); 
        }
        return area;
    }
};


// way 2

class Solution {
  public:
    
    vector<int> nextSmallerElement(vector<int>& mat, int size) {
        vector<int> result(size);
        stack<int> st;
        
        for(int i = size - 1; i >= 0; i--) {
            while(!st.empty() && mat[st.top()] >= mat[i]) {
                st.pop();
            }
            
            result[i] = st.empty() ? size : st.top();
            
            st.push(i);
        }
        
        return result;
    }
    
    vector<int> prevSmallerElement(vector<int>& mat, int size) {
        vector<int> result(size);
        stack<int> st;
        
        for(int i = 0; i < size; i++) {
            while(!st.empty() && mat[st.top()] >= mat[i]) {
                st.pop();
            }
            
            result[i] = st.empty() ? -1 : st.top();
            
            st.push(i);
        }
        
        return result;
    }
    
    int largestRectangleArea(vector<int>& mat, int size) {
        vector<int> nse = nextSmallerElement(mat, size);
        vector<int> pse = prevSmallerElement(mat, size);
        
        int curArea = 0;
        
        // calculate area for every cell and maximize it
        for(int i = 0; i < size; i++) {
            int length  = mat[i];
            int breadth = nse[i] - pse[i] - 1;
            curArea = max(curArea, length * breadth);
        }
        
        return curArea;
    }
    
    int maxArea(vector<vector<int>> &mat) {
        // code here
        int m = mat.size();
        int n = mat[0].size();
        
        int area = largestRectangleArea(mat[0], n);
        
        for(int r = 1; r < m; r++) {
            for(int c = 0; c < n; c++) {
                // add from the above row like historgram
                mat[r][c] = mat[r][c] ? mat[r][c] + mat[r - 1][c] : 0;
            }
            
            area = max(area, largestRectangleArea(mat[r], n));
        }
        
        return area;
    }
};
